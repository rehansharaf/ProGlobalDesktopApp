package app;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */


import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.net.URISyntaxException;
import java.net.URL;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.filechooser.FileSystemView;

import org.apache.commons.io.FileUtils;

import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.ImageIcon;
import javax.swing.LayoutStyle.ComponentPlacement;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Image;
import java.awt.Toolkit;

import net.miginfocom.swing.MigLayout;

import javax.swing.JLabel;
import javax.swing.JButton;
import javax.swing.JSeparator;

import java.awt.Cursor;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Font;

import javax.swing.SwingConstants;
import javax.swing.JPanel;

import java.awt.GridLayout;
import java.awt.FlowLayout;

/**
 *
 * @author Rehan
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
	
	private String host = "10.0.0.91";
	//private String host = "182.184.111.111";
	private String user = "rehanedex";
	private String pass = "rehanedex";
	
    public MainUI() {
    	//setResizable(false);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
    	
    	List<Image> icons = new ArrayList<Image>();
    	icons.add(new ImageIcon(getClass().getResource("/icon/16.png")).getImage());
    	icons.add(new ImageIcon(getClass().getResource("/icon/32.png")).getImage());
    	this.setIconImages(icons);

    	jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        
        jScrollPane1.setAutoscrolls(true);
        
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        jPanel3.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        jPanel3.setAutoscrolls(true);
        
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        jPanel2.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        jPanel2.setAutoscrolls(true);
        jLabel16 = new javax.swing.JLabel();
        btnInjuredWorkerUpload = new javax.swing.JButton();
        btnInjuredWorkerQueue = new javax.swing.JButton();
        btnInjuredWorkerProcessing = new javax.swing.JButton();
        btnInjuredWorkerFileSample = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        btnCandRUpload = new javax.swing.JButton();
        candrQueue = new javax.swing.JButton();
        candrProcessing = new javax.swing.JButton();
        btnCandRFileSample = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        btnConexemDataFetchAllUpload = new javax.swing.JButton();
        btnConexemAllQueue = new javax.swing.JButton();
        btnConexemProcessing = new javax.swing.JButton();
        btnConexemFileSample = new javax.swing.JButton();
        jLabel19 = new javax.swing.JLabel();
        btnConexemDataFetchRFAUpload = new javax.swing.JButton();
        btnConexemRFAQueue = new javax.swing.JButton();
        btnConexemRFAProcessing = new javax.swing.JButton();
        btnConexemRFAFileSample = new javax.swing.JButton();
        jLabelDocMerging = new javax.swing.JLabel();
        btnInjuredWorkerDownload = new javax.swing.JButton();
        btnCandRDownload = new javax.swing.JButton();
        btnConexemDataFetchAllDownload = new javax.swing.JButton();
        conexemDataFetchRFADownload = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Automation Utilities");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Automation Services");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel16.setText("Injured Worker Details");

        btnInjuredWorkerUpload.setText("Upload");
        btnInjuredWorkerUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInjuredWorkerUploadActionPerformed(evt);
            }
        });

        btnInjuredWorkerQueue.setText("Check");
        btnInjuredWorkerQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					injuredWorkerQueue(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        btnInjuredWorkerProcessing.setText("Check");
        btnInjuredWorkerProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					btnInjuredWorkerProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
            }
        });

        btnInjuredWorkerFileSample.setText("File Sample");
        btnInjuredWorkerFileSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	downloadSample("InjuredWorker.xls");
            }
        });

        jLabel17.setText("C&R_Events");

        btnCandRUpload.setText("Upload");
        btnCandRUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCandRUpload(evt);
            }
        });

        candrQueue.setText("Check");
        candrQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					candrEventQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        candrProcessing.setText("Check");
        candrProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					candrProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
            }
        });

        btnCandRFileSample.setText("File Sample");
        btnCandRFileSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	downloadSample("C&R.xls");
            }
        });

        jLabel18.setText("ConexemDataFetchAll");

        btnConexemDataFetchAllUpload.setText("Upload");
        btnConexemDataFetchAllUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnConexemDataFetchAllUpload(evt);
            }
        });

        btnConexemAllQueue.setText("Check");
        btnConexemAllQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					conexemAllQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        btnConexemProcessing.setText("Check");
        btnConexemProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					conexemAllProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
            }
        });

        btnConexemFileSample.setText("File Sample");
        btnConexemFileSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	downloadSample("ConexemDataFetch.xls");
            }
        });

        jLabel19.setText("ConexemDataFetchRFA");

        btnConexemDataFetchRFAUpload.setText("Upload");
        btnConexemDataFetchRFAUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	conexemDataFetchRFAUpload(evt);
            }
        });

        btnConexemRFAQueue.setText("Check");
        btnConexemRFAQueue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					conexemRFAQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        btnConexemRFAProcessing.setText("Check");
        btnConexemRFAProcessing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					conexemRFAProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
            }
        });

        btnConexemRFAFileSample.setText("File Sample");
        btnConexemRFAFileSample.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	downloadSample("ConexemDataFetch.xls");
            }
        });

        btnInjuredWorkerDownload.setText("Download");
        btnInjuredWorkerDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnInjuredWorkerDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        btnCandRDownload.setText("Download");
        btnCandRDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
					btnCandRDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        btnConexemDataFetchAllDownload.setText("Download");
        btnConexemDataFetchAllDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					conexemDataFetchAllDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        conexemDataFetchRFADownload.setText("Download");
        conexemDataFetchRFADownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
					conexemDataFetchRFADownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });

        jScrollPane1.setViewportView(jPanel2);
        jPanel2.setLayout(new MigLayout("", "[208px,grow][65px,grow][79px,grow][72px,grow][70px,grow][85px,grow][70px:n,grow]", "[][23][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px][23px]"));
        
        JSeparator separator_4 = new JSeparator();
        jPanel2.add(separator_4, "cell 0 0");
        

//Conexem C&R Comment Posting Service
        lblConexemCRComPost = new JLabel();
        lblConexemCRComPost.setText("Conexem C&R Comment Post");
        jPanel2.add(lblConexemCRComPost, "cell 0 1");
        
        btnCCandRComP_Upload = new JButton();
        btnCCandRComP_Upload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	
            	String com = evt.getActionCommand();
        		try {
        		uploadFile(com,"Conexem_C&RPosting_Request");  //FTP Foldername
        		} catch (IOException ex) {
        		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        		} catch (InterruptedException ex) {
        		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        		}
            	
        	
            }
        });
        btnCCandRComP_Upload.setText("Upload");
        jPanel2.add(btnCCandRComP_Upload, "cell 1 1,growx");
        
        
        btnCCandRComP_Down = new JButton();
        btnCCandRComP_Down.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

            	DownloadFrame df;
				try {
					df = new DownloadFrame(host,user,pass,"Conexem_C&RPosting_Response");
	                df.setVisible(true);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
        btnCCandRComP_Down.setText("Download");
        jPanel2.add(btnCCandRComP_Down, "cell 2 1,growx");
        
        btnCCandRComP_Que = new JButton();
        btnCCandRComP_Que.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

            	QueueFiles df;
				try {
					df = new QueueFiles(host,user,pass,"Conexem_C&RPosting_Request");
	                df.setVisible(true);
				} catch (IOException e) {
					e.printStackTrace();
				}

            }
        });
        btnCCandRComP_Que.setText("Check");
        jPanel2.add(btnCCandRComP_Que, "cell 3 1,growx");
        
        btnCCandRComP_Proc = new JButton();
        btnCCandRComP_Proc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {

            	ProcessingFilePopup processing_pop;
				try {
					processing_pop = new ProcessingFilePopup("Conexem_CandRPosting");
	            	processing_pop.setVisible(true);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
            }
        });
        btnCCandRComP_Proc.setText("Check");
        jPanel2.add(btnCCandRComP_Proc, "cell 4 1,growx");
        
        btnCCandRComP_Sample = new JButton();
        btnCCandRComP_Sample.addActionListener(new ActionListener() {
           	public void actionPerformed(ActionEvent evt) {
            		downloadSample("C&R_CommentPosting_Sample.xls");
            	}
            });
        btnCCandRComP_Sample.setText("File Sample");
        jPanel2.add(btnCCandRComP_Sample, "cell 5 1,growx");
        
        btnCCandRComP_Desc = new JButton();
        btnCCandRComP_Desc.addActionListener(new ActionListener() {
    		public void actionPerformed(ActionEvent evt) {
    			
    			String descText = "This service is used post C&R Comments in conexem, Request file format should be in .xls (97/2003) excel format, for complete details "
    					+ "regarding the request file format kindly download the file sample, Moreover in response you will get the excel sheet.";
    			DescFrame descframe = new DescFrame(descText);
    			descframe.setVisible(true);
    			
    			
    		}
    	});
        btnCCandRComP_Desc.setText("Description");
        jPanel2.add(btnCCandRComP_Desc, "cell 6 1,growx");
        
//Bulk Emailing Service
        lblBulkEmail = new JLabel();
        lblBulkEmail.setText("Bulk Email");
        jPanel2.add(lblBulkEmail, "cell 0 2,growx");
        
        btnBulkEmailUpload = new JButton();
        btnBulkEmailUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	bulkEmailUpload(evt);
            }
        });
        btnBulkEmailUpload.setText("Upload");
        jPanel2.add(btnBulkEmailUpload, "cell 1 2,growx");
       
        
        btnBulkEmailDownload = new JButton();
        btnBulkEmailDownload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	try {
            	bulkEmailDownload(evt);
            	}catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
        btnBulkEmailDownload.setText("Download");
        jPanel2.add(btnBulkEmailDownload, "cell 2 2,growx");
        
        btnBulkEmailQueue = new JButton();
        btnBulkEmailQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					bulkEmailQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnBulkEmailQueue.setText("Check");
        jPanel2.add(btnBulkEmailQueue, "cell 3 2,growx");
        
        btnBulkEmailProcessing = new JButton();
        btnBulkEmailProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					bulkEmailProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnBulkEmailProcessing.setText("Check");
        jPanel2.add(btnBulkEmailProcessing, "cell 4 2,growx");
        
        btnBulkEmailFileSample = new JButton();
        btnBulkEmailFileSample.addActionListener(new ActionListener() {
           	public void actionPerformed(ActionEvent evt) {
            		downloadSample("BulkEmail.7z");
            	}
            });
        btnBulkEmailFileSample.setText("File Sample");
        jPanel2.add(btnBulkEmailFileSample, "cell 5 2,growx");
        
        btnBulkEmailDesc = new JButton();
        btnBulkEmailDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used send emails in bulk, Request file format should be in .7z zip, for complete details "
        				+ "regarding the request file format kindly download the file sample, Moreover in response you will get the excel sheet.";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnBulkEmailDesc.setText("Description");
        jPanel2.add(btnBulkEmailDesc, "cell 6 2,growx");
        
        lblSbrdocrequest = new JLabel();
        lblSbrdocrequest.setText("SBRDoc_Request");
        jPanel2.add(lblSbrdocrequest, "cell 0 3,growx");
        
        btnSBRDocUpload = new JButton();
        btnSBRDocUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		sbrDocUpload(evt);
        	}
        });
		
        btnSBRDocUpload.setText("Upload");
        jPanel2.add(btnSBRDocUpload, "cell 1 3,growx");
        
        btnSBRDocDownload = new JButton();
        btnSBRDocDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
        			sbrDocDownload(evt);

				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSBRDocDownload.setText("Download");
        jPanel2.add(btnSBRDocDownload, "cell 2 3,growx");
        
        btnSBRDocQueue = new JButton();
        btnSBRDocQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					sbrDocQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSBRDocQueue.setText("Check");
        jPanel2.add(btnSBRDocQueue, "cell 3 3,growx");
        
        btnSBRDocProcessing = new JButton();
        btnSBRDocProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					sbrDocProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSBRDocProcessing.setText("Check");
        jPanel2.add(btnSBRDocProcessing, "cell 4 3,growx");
        
        btnSBRDocFileSample = new JButton();
        btnSBRDocFileSample.addActionListener(new ActionListener() {
       	public void actionPerformed(ActionEvent evt) {
        		downloadSample("SBRDoc_Request.xls");
        	}
        });
        btnSBRDocFileSample.setText("File Sample");
        jPanel2.add(btnSBRDocFileSample, "cell 5 3,growx");
        
        btnSBRDocDesc = new JButton();
        btnSBRDocDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to generate SBR Documents while sending all the required information in "
        				+ "request excel sheet and in response you will get the zip file having PDF documents";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnSBRDocDesc.setText("Description");
        jPanel2.add(btnSBRDocDesc, "cell 6 3,growx");
        
        lblGetrequestdocdocucent = new JLabel();
        lblGetrequestdocdocucent.setText("GetRequestDoc_Docucent");
        jPanel2.add(lblGetrequestdocdocucent, "cell 0 4");
        
        btnDocNameDocucentUpload = new JButton();
        btnDocNameDocucentUpload = new JButton();
        btnDocNameDocucentUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		docNameDocucentUpload(evt);
        	}
        });
        btnDocNameDocucentUpload.setText("Upload");
        jPanel2.add(btnDocNameDocucentUpload, "cell 1 4,grow");
        
        btnDocNameDocucentDown = new JButton();
        btnDocNameDocucentDown.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
        			btnDocNameDocucentDown(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocNameDocucentDown.setText("Download");
        jPanel2.add(btnDocNameDocucentDown, "cell 2 4,grow");
        
        btnDocNameDocucentQueue = new JButton();
        btnDocNameDocucentQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
        			btnDocNameDocucentQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocNameDocucentQueue.setText("Check");
        jPanel2.add(btnDocNameDocucentQueue, "cell 3 4,grow");
        
        btnDocNameDocucentProcess = new JButton();
        btnDocNameDocucentProcess.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
        			btnDocNameDocucentProcess(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocNameDocucentProcess.setText("Check");
        jPanel2.add(btnDocNameDocucentProcess, "cell 4 4,grow");
        
        btnDocNameDocucentSample = new JButton();
        btnDocNameDocucentSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("GetDocName_Docucent.xls");
        	}
        });
        btnDocNameDocucentSample.setText("File Sample");
        jPanel2.add(btnDocNameDocucentSample, "cell 5 4,grow");
        
        btnDocNameDocucentDesc = new JButton();
        btnDocNameDocucentDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to get the request packet name against the confirmation number which was sent through docucent, "
        				+ "you can check the request file format present under file sample";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnDocNameDocucentDesc.setText("Description");
        jPanel2.add(btnDocNameDocucentDesc, "cell 6 4,grow");
        
        lblSupdecrequest = new JLabel();
        lblSupdecrequest.setText("SupDecRequest");
        jPanel2.add(lblSupdecrequest, "cell 0 5");
        
        btnSupDecUpload = new JButton();
        btnSupDecUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		supDecUpload(evt);
        	}
        });
        btnSupDecUpload.setText("Upload");
        jPanel2.add(btnSupDecUpload, "cell 1 5,growx");
        
        btnSupDecDownload = new JButton();
        btnSupDecDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecDownload.setText("Download");
        jPanel2.add(btnSupDecDownload, "cell 2 5,growx");
        
        btnSupDecQueue = new JButton();
        btnSupDecQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecQueue.setText("Check");
        jPanel2.add(btnSupDecQueue, "cell 3 5,growx");
        
        btnSupDecProcessing = new JButton();
        btnSupDecProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecProcessing.setText("Check");
        jPanel2.add(btnSupDecProcessing, "cell 4 5,growx");
        
        btnSupDecFileSample = new JButton();
        btnSupDecFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("SupDecRequest.xls");
        	}
        });
        btnSupDecFileSample.setText("File Sample");
        jPanel2.add(btnSupDecFileSample, "cell 5 5,growx");
        
        btnSupDecDesc = new JButton();
        btnSupDecDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to get the participant details from Eams public search portal, participants include "
        				+ "ClaimAdmin, Employer, Lawfirm. Details are search through ADJNumber provided in the request excel sheet";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnSupDecDesc.setText("Description");
        jPanel2.add(btnSupDecDesc, "cell 6 5,growx");
        
        lblSupdecallparty = new JLabel();
        lblSupdecallparty.setText("SupDecAllPartyRequest");
        jPanel2.add(lblSupdecallparty, "cell 0 6");
        
        btnSupDecAllPartyUpload = new JButton();
        btnSupDecAllPartyUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		supDecAllPartyUpload(evt);
        	}
        });
        btnSupDecAllPartyUpload.setText("Upload");
        jPanel2.add(btnSupDecAllPartyUpload, "cell 1 6,growx");
        
        btnSupDecAllPartyDownload = new JButton();
        btnSupDecAllPartyDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecAllPartyDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecAllPartyDownload.setText("Download");
        jPanel2.add(btnSupDecAllPartyDownload, "cell 2 6,growx");
        
        btnSupDecAllPartyQueue = new JButton();
        btnSupDecAllPartyQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecAllPartyQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecAllPartyQueue.setText("Check");
        jPanel2.add(btnSupDecAllPartyQueue, "cell 3 6,growx");
        
        btnSupDecAllPartyProcessing = new JButton();
        btnSupDecAllPartyProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecAllPartyProcessing();
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecAllPartyProcessing.setText("Check");
        jPanel2.add(btnSupDecAllPartyProcessing, "cell 4 6,growx");
        
        btnSupDecAllPartyFileSample = new JButton();
        btnSupDecAllPartyFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("SupDecAllPartyRequest.xls");
        	}
        });
        btnSupDecAllPartyFileSample.setText("File Sample");
        jPanel2.add(btnSupDecAllPartyFileSample, "cell 5 6,growx");
        
        btnSupDecAllPartyDesc = new JButton();
        btnSupDecAllPartyDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to get all participant details from Eams public search portal present against the case, input parameter "
        				+ "is ADJNumber present in the request excel sheet ";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        	}
        });
        btnSupDecAllPartyDesc.setText("Description");
        jPanel2.add(btnSupDecAllPartyDesc, "cell 6 6,growx");
        
        lblSupdecallpartyrequest = new JLabel();
        lblSupdecallpartyrequest.setText("SupDecAllPartyRequest2");
        jPanel2.add(lblSupdecallpartyrequest, "cell 0 7");
        
        btnSupDecAllParty2Upload = new JButton();
        btnSupDecAllParty2Upload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		supDecAllParty2Upload(evt);
        	}
        });
        btnSupDecAllParty2Upload.setText("Upload");
        jPanel2.add(btnSupDecAllParty2Upload, "cell 1 7,growx");
        
        btnSupDecAllParty2Download = new JButton();
        btnSupDecAllParty2Download.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecAllParty2Download(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecAllParty2Download.setText("Download");
        jPanel2.add(btnSupDecAllParty2Download, "cell 2 7,growx");
        
        btnSupDecAllParty2Queue = new JButton();
        btnSupDecAllParty2Queue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecAllParty2Queue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecAllParty2Queue.setText("Check");
        jPanel2.add(btnSupDecAllParty2Queue, "cell 3 7,growx");
        
        btnSupDecAllParty2Processing = new JButton();
        btnSupDecAllParty2Processing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					supDecAllParty2Processing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnSupDecAllParty2Processing.setText("Check");
        jPanel2.add(btnSupDecAllParty2Processing, "cell 4 7,growx");
        
        btnSupDecAllParty2FileSample = new JButton();
        btnSupDecAllParty2FileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("SupDecAllPartyRequest.xls");
        	}
        });
        btnSupDecAllParty2FileSample.setText("File Sample");
        jPanel2.add(btnSupDecAllParty2FileSample, "cell 5 7,growx");
        
        btnSupDecAllParty2Desc = new JButton();
        btnSupDecAllParty2Desc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to get all participant details from Eams public search portal present against the case, input parameter "
        				+ "is ADJNumber present in the request excel sheet ";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnSupDecAllParty2Desc.setText("Description");
        jPanel2.add(btnSupDecAllParty2Desc, "cell 6 7,growx");
        
        lblResizepdf = new JLabel();
        lblResizepdf.setText("ResizePDF");
        jPanel2.add(lblResizepdf, "cell 0 8");
        
        btnResizePDFUpload = new JButton();
        btnResizePDFUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		resizePDFUpload(evt);
        	}
        });
        btnResizePDFUpload.setText("Upload");
        jPanel2.add(btnResizePDFUpload, "cell 1 8,growx");
        
        btnResizePDFDownload = new JButton();
        btnResizePDFDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					resizePDFDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnResizePDFDownload.setText("Download");
        jPanel2.add(btnResizePDFDownload, "cell 2 8,growx");
        
        btnResizePDFQueue = new JButton();
        btnResizePDFQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					resizePDFQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnResizePDFQueue.setText("Check");
        jPanel2.add(btnResizePDFQueue, "cell 3 8,growx");
        
        btnResizePDFProcessing = new JButton();
        btnResizePDFProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					resizePDFProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnResizePDFProcessing.setText("Check");
        jPanel2.add(btnResizePDFProcessing, "cell 4 8,growx");
        
        btnResizePDFFileSample = new JButton();
        btnResizePDFFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("ResizePDF.xls");
        	}
        });
        btnResizePDFFileSample.setText("File Sample");
        jPanel2.add(btnResizePDFFileSample, "cell 5 8,growx");
        
        btnResizePDFDesc = new JButton();
        btnResizePDFDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used resize the merged PDFs which are different in sizes when merged, so this service will "
        				+ "sync all the docs to the same size";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnResizePDFDesc.setText("Description");
        jPanel2.add(btnResizePDFDesc, "cell 6 8,growx");
        
        lblRuntimehcfa = new JLabel();
        lblRuntimehcfa.setText("Runtime_HCFA");
        jPanel2.add(lblRuntimehcfa, "cell 0 9");
        
        btnRuntimeHCFAUpload = new JButton();
        btnRuntimeHCFAUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		runtimeHCFAUpload(evt);
        	}
        });
        btnRuntimeHCFAUpload.setText("Upload");
        jPanel2.add(btnRuntimeHCFAUpload, "cell 1 9,growx");
        
        btnRuntimeHCFADownload = new JButton();
        btnRuntimeHCFADownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runtimeHCFADownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRuntimeHCFADownload.setText("Download");
        jPanel2.add(btnRuntimeHCFADownload, "cell 2 9,growx");
        
        btnRuntimeHCFAQueue = new JButton();
        btnRuntimeHCFAQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runtimeHCFAQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRuntimeHCFAQueue.setText("Check");
        jPanel2.add(btnRuntimeHCFAQueue, "cell 3 9,growx");
        
        btnRuntimeHCFAProcessing = new JButton();
        btnRuntimeHCFAProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runtimeHCFAProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRuntimeHCFAProcessing.setText("Check");
        jPanel2.add(btnRuntimeHCFAProcessing, "cell 4 9,growx");
        
        btnRuntimeHCFAFileSample = new JButton();
        btnRuntimeHCFAFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("RuntimeHCFA.xls");
        	}
        });
        btnRuntimeHCFAFileSample.setText("File Sample");
        jPanel2.add(btnRuntimeHCFAFileSample, "cell 5 9,growx");
        
        btnRuntimeHCFADesc = new JButton();
        btnRuntimeHCFADesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download the Runtime HCFAs in bulk from Medflow";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnRuntimeHCFADesc.setText("Description");
        jPanel2.add(btnRuntimeHCFADesc, "cell 6 9,growx");
        
        lblRuntimehcfaallstudy = new JLabel();
        lblRuntimehcfaallstudy.setText("Runtime_HCFA_AllStudy");
        jPanel2.add(lblRuntimehcfaallstudy, "cell 0 10");
        
        btnHCFAAllStudyUpload = new JButton();
        btnHCFAAllStudyUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		hcfaAllStudyUpload(evt);
        	}
        });
        btnHCFAAllStudyUpload.setText("Upload");
        jPanel2.add(btnHCFAAllStudyUpload, "cell 1 10,growx");
        
        btnHCFAAllStudyDownload = new JButton();
        btnHCFAAllStudyDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hcfaAllStudyDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHCFAAllStudyDownload.setText("Download");
        jPanel2.add(btnHCFAAllStudyDownload, "cell 2 10,growx");
        
        btnHCFAAllStudyQueue = new JButton();
        btnHCFAAllStudyQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hcfaAllStudyQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHCFAAllStudyQueue.setText("Check");
        jPanel2.add(btnHCFAAllStudyQueue, "cell 3 10,growx");
        
        btnHCFAAllStudyProcessing = new JButton();
        btnHCFAAllStudyProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hcfaAllStudyProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHCFAAllStudyProcessing.setText("Check");
        jPanel2.add(btnHCFAAllStudyProcessing, "cell 4 10,growx");
        
        btnHCFAAllStudyFileSample = new JButton();
        btnHCFAAllStudyFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("RuntimeHCFA_AllStudy.xls");
        	}
        });
        btnHCFAAllStudyFileSample.setText("File Sample");
        jPanel2.add(btnHCFAAllStudyFileSample, "cell 5 10,growx");
        
        btnHCFAAllStudyDesc = new JButton();
        btnHCFAAllStudyDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download Runtime HCFA against all the studies from Medflow";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnHCFAAllStudyDesc.setText("Description");
        jPanel2.add(btnHCFAAllStudyDesc, "cell 6 10,growx");
        
        lblRuntimeinterpretingbill = new JLabel();
        lblRuntimeinterpretingbill.setText("Runtime_InterpretingBill");
        jPanel2.add(lblRuntimeinterpretingbill, "cell 0 11");
        
        btnRunInterpretingBillUpload = new JButton();
        btnRunInterpretingBillUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		runInterpretingBillUpload(evt);
        	}
        });
        btnRunInterpretingBillUpload.setText("Upload");
        jPanel2.add(btnRunInterpretingBillUpload, "cell 1 11,growx");
        
        btnRunInterpretingBillDownload = new JButton();
        btnRunInterpretingBillDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runInterpretingBillDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunInterpretingBillDownload.setText("Download");
        jPanel2.add(btnRunInterpretingBillDownload, "cell 2 11,growx");
        
        btnRunInterpretingBillQueue = new JButton();
        btnRunInterpretingBillQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runInterpretingBillQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunInterpretingBillQueue.setText("Check");
        jPanel2.add(btnRunInterpretingBillQueue, "cell 3 11,growx");
        
        btnRunInterpretingBillProcessing = new JButton();
        btnRunInterpretingBillProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runInterpretingBillProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunInterpretingBillProcessing.setText("Check");
        jPanel2.add(btnRunInterpretingBillProcessing, "cell 4 11,growx");
        
        btnRunInterpretingBillFileSample = new JButton();
        btnRunInterpretingBillFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("RuntimeInterpretingBill.xls");
        	}
        });
        btnRunInterpretingBillFileSample.setText("File Sample");
        jPanel2.add(btnRunInterpretingBillFileSample, "cell 5 11,growx");
        
        btnRuntimeInterpretingBillDesc = new JButton();
        btnRuntimeInterpretingBillDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download Runtime Interpreting Bills in bulk from Medflow";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnRuntimeInterpretingBillDesc.setText("Description");
        jPanel2.add(btnRuntimeInterpretingBillDesc, "cell 6 11,growx");
        
        lblRuntimeledger = new JLabel();
        lblRuntimeledger.setText("Runtime_Ledger");
        jPanel2.add(lblRuntimeledger, "cell 0 12");
        
        btnRunLedgerUpload = new JButton();
        btnRunLedgerUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		runLedgerUpload(evt);
        	}
        });
        btnRunLedgerUpload.setText("Upload");
        jPanel2.add(btnRunLedgerUpload, "cell 1 12,growx");
        
        btnRunLedgerDownload = new JButton();
        btnRunLedgerDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runLedgerDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunLedgerDownload.setText("Download");
        jPanel2.add(btnRunLedgerDownload, "cell 2 12,growx");
        
        btnRunLedgerQueue = new JButton();
        btnRunLedgerQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runLedgerQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunLedgerQueue.setText("Check");
        jPanel2.add(btnRunLedgerQueue, "cell 3 12,growx");
        
        btnRunLedgerProcessing = new JButton();
        btnRunLedgerProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runLedgerProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunLedgerProcessing.setText("Check");
        jPanel2.add(btnRunLedgerProcessing, "cell 4 12,growx");
        
        btnRunLedgerFileSample = new JButton();
        btnRunLedgerFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("RuntimeLedger.xls");
        	}
        });
        btnRunLedgerFileSample.setText("File Sample");
        jPanel2.add(btnRunLedgerFileSample, "cell 5 12,growx");
        
        btnRunLedgerDesc = new JButton();
        btnRunLedgerDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download Ledger in bulk from medflow";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnRunLedgerDesc.setText("Description");
        jPanel2.add(btnRunLedgerDesc, "cell 6 12,growx");
        
        lblRuntimeledgerallstudy = new JLabel();
        lblRuntimeledgerallstudy.setText("Runtime_Ledger_AllStudy");
        jPanel2.add(lblRuntimeledgerallstudy, "cell 0 13");
        
        btnRunLedgerAllStudyUpload = new JButton();
        btnRunLedgerAllStudyUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		runLedgerAllStudyUpload(evt);
        	}
        });
        btnRunLedgerAllStudyUpload.setText("Upload");
        jPanel2.add(btnRunLedgerAllStudyUpload, "cell 1 13,growx");
        
        btnRunLedgerAllStudyDownload = new JButton();
        btnRunLedgerAllStudyDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runLedgerAllStudyDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunLedgerAllStudyDownload.setText("Download");
        jPanel2.add(btnRunLedgerAllStudyDownload, "cell 2 13,growx");
        
        btnRunLedgerAllStudyQueue = new JButton();
        btnRunLedgerAllStudyQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runLedgerAllStudyQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunLedgerAllStudyQueue.setText("Check");
        jPanel2.add(btnRunLedgerAllStudyQueue, "cell 3 13,growx");
        
        btnRunLedgerAllStudyProcessing = new JButton();
        btnRunLedgerAllStudyProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					runLedgerAllStudyProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnRunLedgerAllStudyProcessing.setText("Check");
        jPanel2.add(btnRunLedgerAllStudyProcessing, "cell 4 13,growx");
        
        btnRunLedgerAllStudyFileSample = new JButton();
        btnRunLedgerAllStudyFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("RuntimeLedger_AllStudy.xls");
        	}
        });
        btnRunLedgerAllStudyFileSample.setText("File Sample");
        jPanel2.add(btnRunLedgerAllStudyFileSample, "cell 5 13,growx");
        
        btnRunLedgerAllStudyDesc = new JButton();
        btnRunLedgerAllStudyDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download Runtime Ledger against all the studies in bulk from medflow";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnRunLedgerAllStudyDesc.setText("Description");
        jPanel2.add(btnRunLedgerAllStudyDesc, "cell 6 13,growx");
        
        lblGetpdfpagenorequest = new JLabel();
        lblGetpdfpagenorequest.setText("GetPDFPageNo");
        jPanel2.add(lblGetpdfpagenorequest, "cell 0 14");
        
        btnGetPDFPageNoUpload = new JButton();
        btnGetPDFPageNoUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		getPDFPageNoUpload(evt);
        	}
        });
        btnGetPDFPageNoUpload.setText("Upload");
        jPanel2.add(btnGetPDFPageNoUpload, "cell 1 14,growx");
        
        btnGetPDFPageNoDownload = new JButton();
        btnGetPDFPageNoDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					getPDFPageNoDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnGetPDFPageNoDownload.setText("Download");
        jPanel2.add(btnGetPDFPageNoDownload, "cell 2 14,growx");
        
        btnGetPDFPageNoQueue = new JButton();
        btnGetPDFPageNoQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					getPDFPageNoQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnGetPDFPageNoQueue.setText("Check");
        jPanel2.add(btnGetPDFPageNoQueue, "cell 3 14,growx");
        
        btnGetPDFPageNoProcessing = new JButton();
        btnGetPDFPageNoProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					getPDFPageNoProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnGetPDFPageNoProcessing.setText("Check");
        jPanel2.add(btnGetPDFPageNoProcessing, "cell 4 14,growx");
        
        btnGetPDFPageNoFileSample = new JButton();
        btnGetPDFPageNoFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("GetPageNoPDF.7z");
        	}
        });
        btnGetPDFPageNoFileSample.setText("File Sample");
        jPanel2.add(btnGetPDFPageNoFileSample, "cell 5 14,growx");
        
        btnGetPDFPageNoDesc = new JButton();
        btnGetPDFPageNoDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to get the number of pages available in the required PDFs in bulk";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnGetPDFPageNoDesc.setText("Description");
        jPanel2.add(btnGetPDFPageNoDesc, "cell 6 14,growx");
        
        lblInterpretingbillcrml = new JLabel();
        lblInterpretingbillcrml.setText("InterpretingBill_CopyRecord_ML");
        jPanel2.add(lblInterpretingbillcrml, "cell 0 15");
        
        btnInterpretingBillCRMLUpload = new JButton();
        btnInterpretingBillCRMLUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		interpretingBillCRMLUpload(evt);
        	}
        });
        btnInterpretingBillCRMLUpload.setText("Upload");
        jPanel2.add(btnInterpretingBillCRMLUpload, "cell 1 15,growx");
        
        btnInterpretingBillCRMLDownload = new JButton();
        btnInterpretingBillCRMLDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					interpretingBillCRMLDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnInterpretingBillCRMLDownload.setText("Download");
        jPanel2.add(btnInterpretingBillCRMLDownload, "cell 2 15,growx");
        
        btnInterpretingBillCRMLQueue = new JButton();
        btnInterpretingBillCRMLQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					interpretingBillCRMLQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnInterpretingBillCRMLQueue.setText("Check");
        jPanel2.add(btnInterpretingBillCRMLQueue, "cell 3 15,growx");
        
        btnInterpretingBillCRMLProcessing = new JButton();
        btnInterpretingBillCRMLProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					interpretingBillCRMLProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnInterpretingBillCRMLProcessing.setText("Check");
        jPanel2.add(btnInterpretingBillCRMLProcessing, "cell 4 15,growx");
        
        btnInterpretingBillCRMLFileSample = new JButton();
        btnInterpretingBillCRMLFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("InterpretingBill_CopyRecord_ML.xls");
        	}
        });
        btnInterpretingBillCRMLFileSample.setText("File Sample");
        jPanel2.add(btnInterpretingBillCRMLFileSample, "cell 5 15,growx");
        
        btnInterpretingBillCRMLDesc = new JButton();
        btnInterpretingBillCRMLDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download documents from medflow environment against the provided studies, documents includes "
        				+ "Prescription, Study level Invoices & Study Level Complete Billing Packet";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnInterpretingBillCRMLDesc.setText("Description");
        jPanel2.add(btnInterpretingBillCRMLDesc, "cell 6 15,growx");
        
        lblLienfiledstatus = new JLabel();
        lblLienfiledstatus.setText("LienFiledStatus");
        jPanel2.add(lblLienfiledstatus, "cell 0 16");
        
        btnLienFileStatusUpload = new JButton();
        btnLienFileStatusUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		lienFileStatusUpload(evt);
        	}
        });
        btnLienFileStatusUpload.setText("Upload");
        jPanel2.add(btnLienFileStatusUpload, "cell 1 16,growx");
        
        btnLienFileStatusDownload = new JButton();
        btnLienFileStatusDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					lienFileStatusDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnLienFileStatusDownload.setText("Download");
        jPanel2.add(btnLienFileStatusDownload, "cell 2 16,growx");
        
        btnLienFileStatusQueue = new JButton();
        btnLienFileStatusQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					lienFileStatusQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnLienFileStatusQueue.setText("Check");
        jPanel2.add(btnLienFileStatusQueue, "cell 3 16,growx");
        
        btnLienFileStatusProcessing = new JButton();
        btnLienFileStatusProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					lienFileStatusProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnLienFileStatusProcessing.setText("Check");
        jPanel2.add(btnLienFileStatusProcessing, "cell 4 16,growx");
        
        btnLienFileStatusFileSample = new JButton();
        btnLienFileStatusFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("LienFileStatus.xls");
        	}
        });
        btnLienFileStatusFileSample.setText("File Sample");
        jPanel2.add(btnLienFileStatusFileSample, "cell 5 16,growx");
        
        btnLienFileStatusDesc = new JButton();
        btnLienFileStatusDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch the lien file details from Eams Public Search portal against provided ADJNumber and "
        				+ "Lien Claimant";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnLienFileStatusDesc.setText("Description");
        jPanel2.add(btnLienFileStatusDesc, "cell 6 16,growx");
        
        lblLienfiledstatusprovider = new JLabel();
        lblLienfiledstatusprovider.setText("LienFiledStatusProvider");
        jPanel2.add(lblLienfiledstatusprovider, "cell 0 17");
        
        btnLienFileStatusProvUpload = new JButton();
        btnLienFileStatusProvUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		lienFileStatusProvUpload(evt);
        	}
        });
        btnLienFileStatusProvUpload.setText("Upload");
        jPanel2.add(btnLienFileStatusProvUpload, "cell 1 17,growx");
        
        btnLienFileStatusProvDownload = new JButton();
        btnLienFileStatusProvDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					lienFileStatusProvDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnLienFileStatusProvDownload.setText("Download");
        jPanel2.add(btnLienFileStatusProvDownload, "cell 2 17,growx");
        
        btnLienFileStatusProvQueue = new JButton();
        btnLienFileStatusProvQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					lienFileStatusProvQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnLienFileStatusProvQueue.setText("Check");
        jPanel2.add(btnLienFileStatusProvQueue, "cell 3 17,growx");
        
        btnLienFileStatusProvProcessing = new JButton();
        btnLienFileStatusProvProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					lienFileStatusProvProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnLienFileStatusProvProcessing.setText("Check");
        jPanel2.add(btnLienFileStatusProvProcessing, "cell 4 17,growx");
        
        btnLienFileStatusProvFileSample = new JButton();
        btnLienFileStatusProvFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("LienClaimantProviderOnly.xls");
        	}
        });
        btnLienFileStatusProvFileSample.setText("File Sample");
        jPanel2.add(btnLienFileStatusProvFileSample, "cell 5 17,growx");
        
        btnLienFileStatusProvDesc = new JButton();
        btnLienFileStatusProvDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch all the lien details against the given provider only from Eams Public Search portal";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnLienFileStatusProvDesc.setText("Description");
        jPanel2.add(btnLienFileStatusProvDesc, "cell 6 17,growx");
        
        lblMeddocsdownload = new JLabel();
        lblMeddocsdownload.setText("MedflowDocsDownload");
        jPanel2.add(lblMeddocsdownload, "cell 0 18");
        
        btnMedDocsDownUpload = new JButton();
        btnMedDocsDownUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		medDocsDownUpload(evt);
        	}
        });
        btnMedDocsDownUpload.setText("Upload");
        jPanel2.add(btnMedDocsDownUpload, "cell 1 18,growx");
        
        btnMedDocsDownDownload = new JButton();
        btnMedDocsDownDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					medDocsDownDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnMedDocsDownDownload.setText("Download");
        jPanel2.add(btnMedDocsDownDownload, "cell 2 18,growx");
        
        btnMedDocsDownQueue = new JButton();
        btnMedDocsDownQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					medDocsDownQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnMedDocsDownQueue.setText("Check");
        jPanel2.add(btnMedDocsDownQueue, "cell 3 18,growx");
        
        btnMedDocsDownProcessing = new JButton();
        btnMedDocsDownProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					medDocsDownProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnMedDocsDownProcessing.setText("Check");
        jPanel2.add(btnMedDocsDownProcessing, "cell 4 18,growx");
        
        btnMedDocsDownFileStatus = new JButton();
        btnMedDocsDownFileStatus.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("MedflowDownloadDocs.xls");
        	}
        });
        btnMedDocsDownFileStatus.setText("File Sample");
        jPanel2.add(btnMedDocsDownFileStatus, "cell 5 18,growx");
        
        btnMedDocsDownDesc = new JButton();
        btnMedDocsDownDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download Medflow Documents in bulk";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnMedDocsDownDesc.setText("Description");
        jPanel2.add(btnMedDocsDownDesc, "cell 6 18,growx");
        
        lblPdfvalidity = new JLabel();
        lblPdfvalidity.setText("PDFValidity");
        jPanel2.add(lblPdfvalidity, "cell 0 19");
        
        btnPDFValidityUpload = new JButton();
        btnPDFValidityUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		pdfValidityUpload(evt);
        	}
        });
        btnPDFValidityUpload.setText("Upload");
        jPanel2.add(btnPDFValidityUpload, "cell 1 19,growx");
        
        btnPDFValidityDownload = new JButton();
        btnPDFValidityDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					pdfValidityDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnPDFValidityDownload.setText("Download");
        jPanel2.add(btnPDFValidityDownload, "cell 2 19,growx");
        
        btnPDFValidityQueue = new JButton();
        btnPDFValidityQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					pdfValidityQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnPDFValidityQueue.setText("Check");
        jPanel2.add(btnPDFValidityQueue, "cell 3 19,growx");
        
        btnPDFValidityProcessing = new JButton();
        btnPDFValidityProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					pdfValidityProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnPDFValidityProcessing.setText("Check");
        jPanel2.add(btnPDFValidityProcessing, "cell 4 19,growx");
        
        btnPDFValidityFileSample = new JButton();
        btnPDFValidityFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("PDFValidity.xls");
        	}
        });
        btnPDFValidityFileSample.setText("File Sample");
        jPanel2.add(btnPDFValidityFileSample, "cell 5 19,growx");
        
        btnPDFValidityDesc = new JButton();
        btnPDFValidityDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to check the validity of PDF documents that either documents are valid, corrupt or not available in "
        				+ "medflow environment";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnPDFValidityDesc.setText("Description");
        jPanel2.add(btnPDFValidityDesc, "cell 6 19,growx");
        
        lblFetchhearingrequest = new JLabel();
        lblFetchhearingrequest.setText("FetchHearingRequest2");
        jPanel2.add(lblFetchhearingrequest, "cell 0 20");
        
        btnFetchHearingReq2Upload = new JButton();
        btnFetchHearingReq2Upload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		fetchHearingReq2Upload(evt);
        	}
        });
        btnFetchHearingReq2Upload.setText("Upload");
        jPanel2.add(btnFetchHearingReq2Upload, "cell 1 20,growx");
        
        btnFetchHearingReq2Download = new JButton();
        btnFetchHearingReq2Download.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					fetchHearingReq2Download(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnFetchHearingReq2Download.setText("Download");
        jPanel2.add(btnFetchHearingReq2Download, "cell 2 20,growx");
        
        btnFetchHearingReq2Queue = new JButton();
        btnFetchHearingReq2Queue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					fetchHearingReq2Queue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnFetchHearingReq2Queue.setText("Check");
        jPanel2.add(btnFetchHearingReq2Queue, "cell 3 20,growx");
        
        btnFetchHearingReq2Processing = new JButton();
        btnFetchHearingReq2Processing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					fetchHearingReq2Processing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnFetchHearingReq2Processing.setText("Check");
        jPanel2.add(btnFetchHearingReq2Processing, "cell 4 20,growx");
        
        btnFetchHearingReq2FileSample = new JButton();
        btnFetchHearingReq2FileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("FetchHearing.xls");
        	}
        });
        btnFetchHearingReq2FileSample.setText("File Sample");
        jPanel2.add(btnFetchHearingReq2FileSample, "cell 5 20,growx");
        
        btnFetchHearingReq2Desc = new JButton();
        btnFetchHearingReq2Desc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch hearing details from Eams public search portal against provided ADJNumbers, This is "
        				+ "2nd Instance of Hearing Service";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnFetchHearingReq2Desc.setText("Description");
        jPanel2.add(btnFetchHearingReq2Desc, "cell 6 20,growx");
        
        lblHearingtestreq = new JLabel();
        lblHearingtestreq.setText("HearingTestReq");
        jPanel2.add(lblHearingtestreq, "cell 0 21");
        
        btnHearingTestReqUpload = new JButton();
        btnHearingTestReqUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		hearingTestReqUpload(evt);
        	}
        });
		
        btnHearingTestReqUpload.setText("Upload");
        jPanel2.add(btnHearingTestReqUpload, "cell 1 21,growx");
        
        btnHearingTestReqDownload = new JButton();
        btnHearingTestReqDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hearingTestReqDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHearingTestReqDownload.setText("Download");
        jPanel2.add(btnHearingTestReqDownload, "cell 2 21,growx");
        
        btnHearingTestReqQueue = new JButton();
        btnHearingTestReqQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hearingTestReqQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHearingTestReqQueue.setText("Check");
        jPanel2.add(btnHearingTestReqQueue, "cell 3 21,growx");
        
        btnHearingTestReqProcessing = new JButton();
        btnHearingTestReqProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hearingTestReqProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHearingTestReqProcessing.setText("Check");
        jPanel2.add(btnHearingTestReqProcessing, "cell 4 21,growx");
        
        btnHearingTestReqFileSample = new JButton();
        btnHearingTestReqFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("FetchHearing.xls");
        	}
        });
        btnHearingTestReqFileSample.setText("File Sample");
        jPanel2.add(btnHearingTestReqFileSample, "cell 5 21,growx");
        
        btnHearingTestReqDesc = new JButton();
        btnHearingTestReqDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch hearing details against provided ADJNumbers from Eams Public Search Portal, This is 3rd "
        				+ "instance of hearing service";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnHearingTestReqDesc.setText("Description");
        jPanel2.add(btnHearingTestReqDesc, "cell 6 21,growx");
        
        lblHearingtestreq_1 = new JLabel();
        lblHearingtestreq_1.setText("HearingTestReq2");
        jPanel2.add(lblHearingtestreq_1, "cell 0 22");
        
        btnHearingTestReq2Upload = new JButton();
        btnHearingTestReq2Upload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		hearingTestReq2Upload(evt);
        	}
        });
        btnHearingTestReq2Upload.setText("Upload");
        jPanel2.add(btnHearingTestReq2Upload, "cell 1 22,growx");
        
        btnHearingTestReq2Download = new JButton();
        btnHearingTestReq2Download.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hearingTestReq2Download(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHearingTestReq2Download.setText("Download");
        jPanel2.add(btnHearingTestReq2Download, "cell 2 22,growx");
        
        btnHearingTestReq2Queue = new JButton();
        btnHearingTestReq2Queue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hearingTestReq2Queue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHearingTestReq2Queue.setText("Check");
        jPanel2.add(btnHearingTestReq2Queue, "cell 3 22,growx");
        
        btnHearingTestReq2Processing = new JButton();
        btnHearingTestReq2Processing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					hearingTestReq2Processing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnHearingTestReq2Processing.setText("Check");
        jPanel2.add(btnHearingTestReq2Processing, "cell 4 22,growx");
        
        btnHearingTestReq2FileSample = new JButton();
        btnHearingTestReq2FileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("FetchHearing.xls");
        	}
        });
        btnHearingTestReq2FileSample.setText("File Sample");
        jPanel2.add(btnHearingTestReq2FileSample, "cell 5 22,growx");
        
        btnHearingTestReq2Desc = new JButton();
        btnHearingTestReq2Desc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch hearing details from Eams Public Search portal against the provided ADJNumbers. This is "
        				+ "4th instance of hearing service";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnHearingTestReq2Desc.setText("Description");
        jPanel2.add(btnHearingTestReq2Desc, "cell 6 22,growx");
        
        lblFetchHearing = new JLabel();
        lblFetchHearing.setText("FetchHearingRequest");
        jPanel2.add(lblFetchHearing, "cell 0 23");
        
        btnFetchHearingReqUpload = new JButton();
        btnFetchHearingReqUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		fetchHearing1Upload(e);
        	}
        });
        btnFetchHearingReqUpload.setText("Upload");
        jPanel2.add(btnFetchHearingReqUpload, "cell 1 23,growx");
        
        
        btnFetchHearingReqDownload = new JButton();
        btnFetchHearingReqDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					fetchHearing1Download();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
        	}
        });
        btnFetchHearingReqDownload.setText("Download");
        jPanel2.add(btnFetchHearingReqDownload, "cell 2 23,growx");
        
        btnFetchHearingReqQueue = new JButton();
        btnFetchHearingReqQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					fetchHearing1Queue();
				} catch (IOException e1) {
					e1.printStackTrace();
				}
        	}
        });
        btnFetchHearingReqQueue.setText("Check");
        jPanel2.add(btnFetchHearingReqQueue, "cell 3 23,growx");
        
        btnFetchHearingReqProcessing = new JButton();
        btnFetchHearingReqProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		try {
					fetchHearing1Processing();
				} catch (ClassNotFoundException | SQLException e1) {
					e1.printStackTrace();
				}
        	}
        });
        btnFetchHearingReqProcessing.setText("Check");
        jPanel2.add(btnFetchHearingReqProcessing, "cell 4 23,growx");
        
        btnFetchHearingReqFileSample = new JButton();
        btnFetchHearingReqFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		downloadSample("FetchHearing.xls");
        	}
        });
        btnFetchHearingReqFileSample.setText("File Sample");
        jPanel2.add(btnFetchHearingReqFileSample, "cell 5 23,growx");
        
        btnFetchHearingReqDesc = new JButton();
        btnFetchHearingReqDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch hearing details from Eams Public Search portal against provided ADJNumbers. This is the 1st instance "
        				+ "of hearing service";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnFetchHearingReqDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        	}
        });
        btnFetchHearingReqDesc.setText("Description");
        jPanel2.add(btnFetchHearingReqDesc, "cell 6 23,growx");
        
        btnConexemDataFetchAllDesc = new JButton();
        btnConexemDataFetchAllDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch all the data from conexem environment that includes tab (Medical Reports & Medical Necessity/EBM) "
        				+ "against the provided external mrn and provider of conexem";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnConexemDataFetchAllDesc.setText("Description");
        jPanel2.add(btnConexemDataFetchAllDesc, "cell 6 25,growx");
        
        btnConexemDataFetchRFADesc = new JButton();
        btnConexemDataFetchRFADesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch all the data from conexem environment that includes tab (Medical Necessity/EBM) "
        				+ "against the provided external mrn and provider of conexem";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnConexemDataFetchRFADesc.setText("Description");
        jPanel2.add(btnConexemDataFetchRFADesc, "cell 6 26,growx");
        
        btnDocucentUpload = new JButton();
        btnDocucentUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		docucentUpload(e);
        	}
        });
        btnDocucentUpload.setText("Upload");
        jPanel2.add(btnDocucentUpload, "cell 1 27,growx");
        
        btnDocucentDownload = new JButton();
        btnDocucentDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docucentDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocucentDownload.setText("Download");
        jPanel2.add(btnDocucentDownload, "cell 2 27,growx");
        
        btnDocucentQueue = new JButton();
        btnDocucentQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docucentQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocucentQueue.setText("Check");
        jPanel2.add(btnDocucentQueue, "cell 3 27,growx");
        
        btnDocucentProcessing = new JButton();
        btnDocucentProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docucentProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocucentProcessing.setText("Check");
        jPanel2.add(btnDocucentProcessing, "cell 4 27,growx");
        
        btnDocucentFileSample = new JButton();
        btnDocucentFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("DocucentRequest.7z");
        	}
        });
        btnDocucentFileSample.setText("File Sample");
        jPanel2.add(btnDocucentFileSample, "cell 5 27,growx");
        
        btnDocucentDesc = new JButton();
        btnDocucentDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to send packets through Docucents in bulk";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnDocucentDesc.setText("Description");
        jPanel2.add(btnDocucentDesc, "cell 6 27,growx");
        
        btnDocMergingDesc = new JButton();
        btnDocMergingDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to Merge PDF Documents in bulk";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnDocMergingDesc.setText("Description");
        jPanel2.add(btnDocMergingDesc, "cell 6 28,growx");
        
        lblDocucentGetpos = new JLabel();
        lblDocucentGetpos.setText("Docucent Get POS");
        jPanel2.add(lblDocucentGetpos, "cell 0 29");
        
        btnDocucentPOSUpload = new JButton();
        btnDocucentPOSUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		docucentPOSUpload(evt);
        	}
        });
        btnDocucentPOSUpload.setText("Upload");
        jPanel2.add(btnDocucentPOSUpload, "cell 1 29,growx");
        
        btnDocucentPOSDownload = new JButton();
        btnDocucentPOSDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docucentPOSDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocucentPOSDownload.setText("Download");
        jPanel2.add(btnDocucentPOSDownload, "cell 2 29,growx");
        
        btnDocucentPOSQueue = new JButton();
        btnDocucentPOSQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docucentPOSQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });

        btnDocucentPOSQueue.setText("Check");
        jPanel2.add(btnDocucentPOSQueue, "cell 3 29,growx");
        
        btnDocucentPOSProcessing = new JButton();
        btnDocucentPOSProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docucentPOSProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocucentPOSProcessing.setText("Check");
        jPanel2.add(btnDocucentPOSProcessing, "cell 4 29,growx");
        
        btnDocucentPOSFileSample = new JButton();
        btnDocucentPOSFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("DocucentGetPOS.xls");
        	}
        });
        btnDocucentPOSFileSample.setText("File Sample");
        jPanel2.add(btnDocucentPOSFileSample, "cell 5 29,growx");
        
        btnDocucentPOSDescription = new JButton();
        btnDocucentPOSDescription.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download the POS from Docucent portal against the provided confirmation number";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnDocucentPOSDescription.setText("Description");
        jPanel2.add(btnDocucentPOSDescription, "cell 6 29,growx");
        
        lblDocDownloadDdm = new JLabel();
        lblDocDownloadDdm.setText("DocsDownloadDDM");
        jPanel2.add(lblDocDownloadDdm, "cell 0 30");
        
        btnDocsDownDDMUpload = new JButton();
        btnDocsDownDDMUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		docsDownloadDDMUpload(evt);
        	}
        });
        btnDocsDownDDMUpload.setText("Upload");
        jPanel2.add(btnDocsDownDDMUpload, "cell 1 30,growx");
        
        btnDocsDownDownload = new JButton();
        btnDocsDownDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docsDownloadDDMDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocsDownDownload.setText("Download");
        jPanel2.add(btnDocsDownDownload, "cell 2 30,growx");
        
        btnDocsDownDDMQueue = new JButton();
        btnDocsDownDDMQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        	
				try {
					docsDownloadDDMQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
				
        	}
        });
        btnDocsDownDDMQueue.setText("Check");
        jPanel2.add(btnDocsDownDDMQueue, "cell 3 30,growx");
        
        btnDocsDownDDMProcessing = new JButton();
        btnDocsDownDDMProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        	
				try {
					docsDownloadDDMProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
				
        	}
        });
        btnDocsDownDDMProcessing.setText("Check");
        jPanel2.add(btnDocsDownDDMProcessing, "cell 4 30,growx");
        
        btnDocsDownDDMFileSample = new JButton();
        btnDocsDownDDMFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("DownloadDocsDDM.xls");
        	}
        });
        btnDocsDownDDMFileSample.setText("File Sample");
        jPanel2.add(btnDocsDownDDMFileSample, "cell 5 30,growx");
        
        btnDocsDownDDMDesc = new JButton();
        btnDocsDownDDMDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to download POS, RFA, Medical Reports & Demographics "
        				+ "against the provided information from Medflow environment";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnDocsDownDDMDesc.setText("Description");
        jPanel2.add(btnDocsDownDDMDesc, "cell 6 30,growx");
        jPanel2.add(jLabel16, "cell 0 31,alignx left,growy");
        
        btnInjuredWorkerDesc = new JButton();
        btnInjuredWorkerDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to get Injured Worker Details from Eams Public Search portal against provided ADJNumbers";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnInjuredWorkerDesc.setText("Description");
        jPanel2.add(btnInjuredWorkerDesc, "cell 6 31,growx");
        jPanel2.add(jLabel17, "cell 0 24,alignx left,growy");
        
        btnCandRDesc = new JButton();
        btnCandRDesc.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		
        		String descText = "This service is used to fetch C&R Event Details against the provided ADJNumbers from Eams Public Search portal";
        		DescFrame descframe = new DescFrame(descText);
        		descframe.setVisible(true);
        		
        		
        	}
        });
        btnCandRDesc.setText("Description");
        jPanel2.add(btnCandRDesc, "cell 6 24,growx");
        
        lblDocucentRequest = new JLabel();
        lblDocucentRequest.setText("Docucent Request");
        jPanel2.add(lblDocucentRequest, "cell 0 27");
        jPanel2.add(jLabel18, "cell 0 25,alignx left,growy");
        jPanel2.add(jLabel19, "cell 0 26,alignx left,growy");
        jPanel2.add(btnInjuredWorkerUpload, "cell 1 31,grow");
        jPanel2.add(btnCandRUpload, "cell 1 24,grow");
        jPanel2.add(btnConexemDataFetchAllUpload, "cell 1 25,grow");
        jPanel2.add(btnConexemDataFetchRFAUpload, "cell 1 26,grow");
        jPanel2.add(btnInjuredWorkerDownload, "cell 2 31,grow");
        jPanel2.add(btnCandRDownload, "cell 2 24,grow");
        jPanel2.add(btnConexemDataFetchAllDownload, "cell 2 25,grow");
        jPanel2.add(conexemDataFetchRFADownload, "cell 2 26,grow");
        jPanel2.add(btnInjuredWorkerQueue, "cell 3 31,grow");
        jPanel2.add(candrQueue, "cell 3 24,grow");
        jPanel2.add(btnConexemAllQueue, "cell 3 25,grow");
        jPanel2.add(btnConexemRFAQueue, "cell 3 26,grow");
        jPanel2.add(btnInjuredWorkerProcessing, "cell 4 31,grow");
        jPanel2.add(candrProcessing, "cell 4 24,grow");
        jPanel2.add(btnConexemProcessing, "cell 4 25,grow");
        jPanel2.add(btnConexemRFAProcessing, "cell 4 26,grow");
        jPanel2.add(btnInjuredWorkerFileSample, "cell 5 31,grow");
        jPanel2.add(btnCandRFileSample, "cell 5 24,grow");
        jPanel2.add(btnConexemRFAFileSample, "cell 5 26,grow");
        jPanel2.add(btnConexemFileSample, "cell 5 25,grow");
        
        lblDocumentmerging = new JLabel();
        lblDocumentmerging.setText("Document Merging");
        jPanel2.add(lblDocumentmerging, "cell 0 28,growy");
        
        btnDocMergingUpload = new JButton();
        btnDocMergingUpload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		docMergingUpload(evt);
        	}
        });
        btnDocMergingUpload.setText("Upload");
        jPanel2.add(btnDocMergingUpload, "cell 1 28,grow");
        
        btnDocMergingDownload = new JButton();
        btnDocMergingDownload.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docMergingDownload(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocMergingDownload.setText("Download");
        jPanel2.add(btnDocMergingDownload, "cell 2 28,grow");
        
        btnDocMergingQueue = new JButton();
        btnDocMergingQueue.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docMergingQueue(evt);
				} catch (IOException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocMergingQueue.setText("Check");
        jPanel2.add(btnDocMergingQueue, "cell 3 28,grow");
        
        btnDocMergingProcessing = new JButton();
        btnDocMergingProcessing.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		try {
					docMergingProcessing(evt);
				} catch (ClassNotFoundException | SQLException e) {
					e.printStackTrace();
				}
        	}
        });
        btnDocMergingProcessing.setText("Check");
        jPanel2.add(btnDocMergingProcessing, "cell 4 28,grow");
        
        btnDocMergingFileSample = new JButton();
        btnDocMergingFileSample.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent evt) {
        		downloadSample("DocMerging.7z");
        	}
        });
        btnDocMergingFileSample.setText("File Sample");
        jPanel2.add(btnDocMergingFileSample, "cell 5 28,grow");
        
        JPanel panel = new JPanel();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 749, Short.MAX_VALUE))
        		.addGroup(layout.createSequentialGroup()
        			.addGap(25)
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addComponent(panel, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        				.addComponent(jScrollPane1, Alignment.TRAILING))
        			.addGap(26))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addContainerGap()
        			.addComponent(jLabel1)
        			.addGap(18)
        			.addComponent(panel, GroupLayout.PREFERRED_SIZE, 25, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED)
        			.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 338, Short.MAX_VALUE)
        			.addContainerGap())
        );
        panel.setLayout(new MigLayout("", "[200,grow][65px,grow][79,grow][72,grow][70,grow][85,grow][70,grow]", "[]"));
        
        label = new JLabel();
        label.setText("Service Name");
        label.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label, "cell 0 0,growx,aligny center");
        
        label_1 = new JLabel();
        label_1.setText("File Upload");
        label_1.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label_1, "cell 1 0,alignx center,growy");
        
        label_2 = new JLabel();
        label_2.setText("File Download");
        label_2.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label_2, "cell 2 0,alignx center,growy");
        
        label_3 = new JLabel();
        label_3.setText("Queue Files");
        label_3.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label_3, "cell 3 0,alignx center,growy");
        
        label_4 = new JLabel();
        label_4.setText("Processing File");
        label_4.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label_4, "cell 4 0,alignx center,growy");
        
        label_5 = new JLabel();
        label_5.setText("File Sample");
        label_5.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label_5, "cell 5 0,alignx center,growy");
        
        label_6 = new JLabel();
        label_6.setText("Description");
        label_6.setFont(new Font("Tahoma", Font.BOLD, 11));
        panel.add(label_6, "cell 6 0,alignx center,growy");
        getContentPane().setLayout(layout);

        jLabel1.getAccessibleContext().setAccessibleName("lblHeading");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>                        

    public void bulkEmailProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("bulkEmail");
    	processing_pop.setVisible(true);
	}

	public void bulkEmailQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"BulkEmail_Request");
        df.setVisible(true);
	}

	public void bulkEmailDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"BulkEmail_Response");
        df.setVisible(true);
    	
	}

	public void bulkEmailUpload(ActionEvent evt) {
		
    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"BulkEmail_Request");  //FTP Foldername
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    	
	}

	public void btnDocNameDocucentProcess(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("RequestDocName_Docucent");
    	processing_pop.setVisible(true);
	}

	public void btnDocNameDocucentQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"GetDocName_Docucent_Request");
        df.setVisible(true);
	}

	public void btnDocNameDocucentDown(ActionEvent evt) throws IOException {
		
    	DownloadFrame df = new DownloadFrame(host,user,pass,"GetDocName_Docucent_Response");
        df.setVisible(true);
		
	}

	public void docNameDocucentUpload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"GetDocName_Docucent_Request");  //FTP Foldername
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    	
	}

	public void downloadSample(String filename) {
 
		InputStream is = getClass().getResourceAsStream("/"+filename);
		OutputStream os = null;
		
   	  
       JFileChooser f = new JFileChooser();
       f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
       int r = f.showSaveDialog(null);
	       if (r == JFileChooser.APPROVE_OPTION) {
	       	
       		        System.out.println(f.getSelectedFile());
       		        File localDir = f.getSelectedFile();
       		    
       		        
       		     try {
       		    	os  = new FileOutputStream(localDir+"/"+filename);
       		        byte[] buffer = new byte[1024];
       		        int length;
       		        while ((length = is.read(buffer)) > 0) {
       		            os.write(buffer, 0, length);
       		        }
       		    } catch (FileNotFoundException e) {
					e.printStackTrace();
				} catch (IOException e) {
					e.printStackTrace();
				} finally {
       		        try {
						is.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
       		        try {
						os.close();
					} catch (IOException e) {
						e.printStackTrace();
					}
       		    }
	       		        
       		        	 SampleDownload sampleD = new SampleDownload();
       		        	 sampleD.setVisible(true);
	       		}  		
    }
    
   
    public void enableDisableMainFrame(boolean val) {
    	
    	this.setEnabled(val);
    	
    }

	public void hearingTestReq2Upload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"HearingTestReq2");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void hearingTestReq2Download(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"HearingTestRes2");
        df.setVisible(true);
	}

	public void hearingTestReq2Queue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"HearingTestReq2");
        df.setVisible(true);
	}

	public void hearingTestReq2Processing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("HearingTestReq2");
    	processing_pop.setVisible(true);
	}


	public void hearingTestReqUpload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"HearingTestReq");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void hearingTestReqDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"HearingTestRes");
        df.setVisible(true);
	}

	public void hearingTestReqQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"HearingTestReq");
        df.setVisible(true);
        
	}

	public void hearingTestReqProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("HearingTestReq");
    	processing_pop.setVisible(true);
    	
	}

	public void fetchHearingReq2Upload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"FetchHearingRequest2");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
        
	}

	public void fetchHearingReq2Download(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"FetchHearingResponse2");
        df.setVisible(true);
	}

	public void fetchHearingReq2Queue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"FetchHearingRequest2");
        df.setVisible(true);
	}

	public void fetchHearingReq2Processing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("FetchHearingReq2");
    	processing_pop.setVisible(true);
	}


	public void pdfValidityUpload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"PDFValidity_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void pdfValidityDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"PDFValidity_Response");
        df.setVisible(true);
	}

	public void pdfValidityQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"PDFValidity_Request");
        df.setVisible(true);
	}

	public void pdfValidityProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("PDFValidity");
    	processing_pop.setVisible(true);
	}


	public void medDocsDownUpload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"MedDocsDownload_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void medDocsDownDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"MedDocsDownload_Response");
        df.setVisible(true);
	}

	public void medDocsDownQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"MedDocsDownload_Request");
        df.setVisible(true);
	}

	public void medDocsDownProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("MedflowDocsDownload");
    	processing_pop.setVisible(true);
	}


	public void lienFileStatusProvUpload(ActionEvent evt) {
    	
    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"LienFiledStatusProvider_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}

	}

	public void lienFileStatusProvDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"LienFiledStatusProvider_Response");
        df.setVisible(true);
	}

	public void lienFileStatusProvQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"LienFiledStatusProvider_Request");
        df.setVisible(true);
        
	}

	public void lienFileStatusProvProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("LienClaimantProvOnly");
    	processing_pop.setVisible(true);
	}


	public void lienFileStatusUpload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"LienFiledStatus_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void lienFileStatusDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"LienFiledStatus_Response");
        df.setVisible(true);
        
	}

	public void lienFileStatusQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"LienFiledStatus_Request");
        df.setVisible(true);
	}

	public void lienFileStatusProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("LienFileStatus");
    	processing_pop.setVisible(true);
    	
	}


	public void interpretingBillCRMLUpload(ActionEvent evt) {
		
    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"InterpretingBill_Request_CR_ML");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}

	public void interpretingBillCRMLDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"InterpretingBill_Response_CR_ML");
        df.setVisible(true);
	}

	public void interpretingBillCRMLQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"InterpretingBill_Request_CR_ML");
        df.setVisible(true);
	}

	public void interpretingBillCRMLProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("InterpretingBill_CopyRecord_ML");
    	processing_pop.setVisible(true);
	}


	public void getPDFPageNoUpload(ActionEvent evt) {

    	String com = evt.getActionCommand();
		try {
		uploadFile(com,"GetPDFPageNo_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void getPDFPageNoDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"GetPDFPageNo_Response");
        df.setVisible(true);
	}

	public void getPDFPageNoQueue(ActionEvent evt) throws IOException {
    	
    	QueueFiles df = new QueueFiles(host,user,pass,"GetPDFPageNo_Request");
        df.setVisible(true);
	}
    
	public void getPDFPageNoProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {
		
		ProcessingFilePopup processing_pop = new ProcessingFilePopup("GetPDFPageNo");
    	processing_pop.setVisible(true);
	}


	public void runLedgerAllStudyUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Runtime_Ledger_RequestAllStudy");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void runLedgerAllStudyDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Runtime_Ledger_ResponseAllStudy");
        df.setVisible(true);
	}

	public void runLedgerAllStudyQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"Runtime_Ledger_RequestAllStudy");
        df.setVisible(true);
	}

	public void runLedgerAllStudyProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("RuntimeLedger_AllStudy");
    	processing_pop.setVisible(true);
	}

	

	public void runLedgerUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Runtime_Ledger_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
        
	}

	public void runLedgerDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Runtime_Ledger_Response");
        df.setVisible(true);
	}

	public void runLedgerQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"Runtime_Ledger_Request");
        df.setVisible(true);
	}

	public void runLedgerProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("RuntimeLedger");
    	processing_pop.setVisible(true);
	}


	public void runInterpretingBillUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Runtime_InterpretingBill_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void runInterpretingBillDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Runtime_InterpretingBill_Response");
        df.setVisible(true);
	}

	public void runInterpretingBillQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"Runtime_InterpretingBill_Request");
        df.setVisible(true);
		
	}

	public void runInterpretingBillProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("RuntimeInterpretingBill");
    	processing_pop.setVisible(true);
	}

	

	public void hcfaAllStudyUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Runtime_HCFA_RequestAllStudy");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void hcfaAllStudyDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Runtime_HCFA_ResponseAllStudy");
        df.setVisible(true);
	}

	public void hcfaAllStudyQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"Runtime_HCFA_RequestAllStudy");
        df.setVisible(true);
	}

	public void hcfaAllStudyProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("RuntimeHCFA_AllStudy");
    	processing_pop.setVisible(true);
	}


	public void runtimeHCFAUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Runtime_HCFA_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void runtimeHCFADownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Runtime_HCFA_Response");
        df.setVisible(true);
	}

	public void runtimeHCFAQueue(ActionEvent evt) throws IOException {

    	QueueFiles df = new QueueFiles(host,user,pass,"Runtime_HCFA_Request");
        df.setVisible(true);
	}

	public void runtimeHCFAProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {
		
		ProcessingFilePopup processing_pop = new ProcessingFilePopup("RuntimeHCFA");
    	processing_pop.setVisible(true);
		
	}


	public void resizePDFUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"ResizePDF_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void resizePDFDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"ResizePDF_Response");
        df.setVisible(true);
	}

	public void resizePDFQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"ResizePDF_Request");
        df.setVisible(true);
        
	}

	public void resizePDFProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("ResizePDF");
    	processing_pop.setVisible(true);
	}


	public void supDecAllParty2Upload(ActionEvent evt) {
		
		String com = evt.getActionCommand();
		try {
		uploadFile(com,"SupDecAllPartyRequest2");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}

	public void supDecAllParty2Download(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"SupDecAllPartyResponse2");
        df.setVisible(true);
	}

	public void supDecAllParty2Queue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"SupDecAllPartyRequest2");
        df.setVisible(true);
	}

	public void supDecAllParty2Processing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("SupDecAllParty2");
    	processing_pop.setVisible(true);
	}


	public void supDecAllPartyProcessing() throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("SupDecAllParty");
    	processing_pop.setVisible(true);
    	
	}

	public void supDecAllPartyQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"SupDecAllPartyRequest");
        df.setVisible(true);
	}

	public void supDecAllPartyDownload(ActionEvent evt) throws IOException {

    	DownloadFrame df = new DownloadFrame(host,user,pass,"SupDecAllPartyResponse");
        df.setVisible(true);
	}


	public void supDecAllPartyUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"SupDecAllPartyRequest");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}


	public void supDecProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("SupDecRequest");
    	processing_pop.setVisible(true);
	}

	public void supDecQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"SupDecRequest");
        df.setVisible(true);
	}

	public void supDecDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"SupDecResponse");
        df.setVisible(true);
	}

	public void supDecUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"SupDecRequest");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void sbrDocProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("SBRDocRequest");
    	processing_pop.setVisible(true);
	}

	public void sbrDocQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"SBRDoc_Request");
        df.setVisible(true);
	}

	public void sbrDocDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"SBRDoc_Response");
        df.setVisible(true);

	}

	public void sbrDocUpload(ActionEvent evt) {


		String com = evt.getActionCommand();
		try {
		uploadFile(com,"SBRDoc_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}


	public void docsDownloadDDMProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("DocsDownloadDDM");
    	processing_pop.setVisible(true);
	}

	public void docsDownloadDDMQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"DownloadDocsDDM_Request");
        df.setVisible(true);
	}

	public void docsDownloadDDMDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"DownloadDocsDDM_Response");
        df.setVisible(true);
	}

	public void docsDownloadDDMUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"DownloadDocsDDM_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void docucentPOSProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("DocucentPOS");
    	processing_pop.setVisible(true);
	}

	public void docucentPOSQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"Docucent_GetPOSRequest");
        df.setVisible(true);
	}

	public void docucentPOSDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Docucent_GetPOSResponse");
        df.setVisible(true);
	}

	public void docucentPOSUpload(ActionEvent evt) {

		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Docucent_GetPOSRequest");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
		
	}

	public void docMergingProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {
		
		ProcessingFilePopup processing_pop = new ProcessingFilePopup("DocMerging");
    	processing_pop.setVisible(true);
		
	}

	public void docMergingQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"DocMerging_Request");
        df.setVisible(true);
	}

	public void docMergingDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"DocMerging_Response");
        df.setVisible(true);
	}

	public void docMergingUpload(ActionEvent evt) {

		// if the user presses the save button show the save dialog
		String com = evt.getActionCommand();
		try {
		uploadFile(com,"DocMerging_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	public void docucentProcessing(ActionEvent evt) throws ClassNotFoundException, SQLException {
		
		ProcessingFilePopup processing_pop = new ProcessingFilePopup("DocucentRequest");
    	processing_pop.setVisible(true);
		
	}

	public void docucentQueue(ActionEvent evt) throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"Docucent_Request");
        df.setVisible(true);
	}

	public void docucentDownload(ActionEvent evt) throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"Docucent_Response");
        df.setVisible(true);
	}

	public void docucentUpload(ActionEvent evt) {

	// if the user presses the save button show the save dialog
			String com = evt.getActionCommand();
			try {
			uploadFile(com,"Docucent_Request");
			} catch (IOException ex) {
			Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
			} catch (InterruptedException ex) {
			Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
			}
	}

	public void fetchHearing1Processing() throws ClassNotFoundException, SQLException {

		ProcessingFilePopup processing_pop = new ProcessingFilePopup("FetchHearing1");
    	processing_pop.setVisible(true);
    	
	}

	public void fetchHearing1Queue() throws IOException {

		QueueFiles df = new QueueFiles(host,user,pass,"FetchHearingRequest");
        df.setVisible(true);
	}

	public void fetchHearing1Download() throws IOException {

		DownloadFrame df = new DownloadFrame(host,user,pass,"FetchHearingResponse");
        df.setVisible(true);
        
	}

	public void uploadFile(String com, String service) throws IOException, InterruptedException {
        
         String filename;
         if (com.equals("save")) {

         	JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
         	j.setMultiSelectionEnabled(true);
         	
             //FileNameExtensionFilter filter = new FileNameExtensionFilter("XLS files", "xls");
             //j.setFileFilter(filter);
             int r = j.showOpenDialog(null);

             if (r == JFileChooser.APPROVE_OPTION)
  
             {
            	   File[] files = j.getSelectedFiles();
            	   for(int i = 0; i < files.length; i++) {
            		  
            		   int count  = i;
            		   //filename = j.getSelectedFile().getName();
            		   filename = files[i].getName();
                       UploadJFrame uploadJ = new UploadJFrame();
                       uploadJ.setVisible(true);
                   	  
                   	//MyWorker worker = new MyWorker(new URL("ftp://"+host), new File(j.getSelectedFile().getAbsolutePath()),service,filename);
                     //MyWorker worker = new MyWorker(host,user,pass, new File(j.getSelectedFile().getAbsolutePath()),service,filename);
                   	MyWorker worker = new MyWorker(host,user,pass, new File(files[i].getAbsolutePath()),service,filename);
                   	worker.addPropertyChangeListener(new PropertyChangeListener() {

    				    @Override
    				    public void propertyChange(PropertyChangeEvent evt) {
    				        if (evt.getPropertyName().equals("progress")) {
    				        	uploadJ.jbutton1ChangeVisiblity(false);
    				        	uploadJ.setDefaultCloseOperation(0);

    				            Integer progress = (Integer) evt.getNewValue();
    				            try {
    								uploadJ.progressBarVal(progress);
    							} catch (MalformedURLException e) {
    								e.printStackTrace();
    							}
    				        }else {
    				        	
    				        	boolean checkBtnVisibile = uploadJ.jbutton1CheckVisiblity();
 		       	            	if(checkBtnVisibile == false) {
 		       	            		uploadJ.jbutton1ChangeVisiblity(true);
     		       	            	//if(count != files.length - 1)
     		       	            		uploadJ.dispose();
 		       	            	
 		       	            	}else
 		       	            		uploadJ.jbutton1ChangeVisiblity(true);
    				        }
    				        	

    				    }
    				});
    				worker.execute();
            		   
            	   }
             	   

             }
            
         }
 
        // if the user presses the open dialog show the open dialog
        else {

        	JFileChooser j = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
         	j.setMultiSelectionEnabled(true);

            //FileNameExtensionFilter filter = new FileNameExtensionFilter("XLS files", "xls");
            //j.setFileFilter(filter);
            int r = j.showOpenDialog(null);

            if (r == JFileChooser.APPROVE_OPTION)
 
            {
         	   	  File[] files = j.getSelectedFiles();
         	   	  for(int i = 0; i < files.length; i++) {
           		   
         	   		  int count  = i;
         	   		  //filename = j.getSelectedFile().getName();
         	   		  filename = files[i].getName();
                      UploadJFrame uploadJ = new UploadJFrame();
                      uploadJ.setVisible(true);
                  	  
                  	// MyWorker worker = new MyWorker("ftp://"+host,user,pass, new File(j.getSelectedFile().getAbsolutePath()),service,filename);
                      	//MyWorker worker = new MyWorker(host,user,pass, new File(j.getSelectedFile().getAbsolutePath()),service,filename);
                    	MyWorker worker = new MyWorker(host,user,pass, new File(files[i].getAbsolutePath()),service,filename);
                  		worker.addPropertyChangeListener(new PropertyChangeListener() {

                	        @Override
                	        public void propertyChange(PropertyChangeEvent evt) {
                	            if (evt.getPropertyName().equals("progress")) {
                	            	uploadJ.jbutton1ChangeVisiblity(false);
        				        	uploadJ.setDefaultCloseOperation(0);

                	                Integer progress = (Integer) evt.getNewValue();
                	                try {
    									uploadJ.progressBarVal(progress);
    								} catch (MalformedURLException e) {
    									e.printStackTrace();
    								}
                	            }else {
                	            	
                	            	boolean checkBtnVisibile = uploadJ.jbutton1CheckVisiblity();
     		       	            	if(checkBtnVisibile == false) {
     		       	            		uploadJ.jbutton1ChangeVisiblity(true);
         		       	            	//if(count != files.length - 1)
         		       	            		uploadJ.dispose();
     		       	            	
     		       	            	}else
     		       	            		uploadJ.jbutton1ChangeVisiblity(true);
        				        
                	            }
                	            	//uploadJ.jbutton1ChangeVisiblity(true);

                	        }
                	    });
                	    worker.execute();
                	
         	   		  
         	   	  }
            	

                 
            }
           
        }
        
    }
    //This is for injuredWorker Upload Button
    private void btnInjuredWorkerUploadActionPerformed(java.awt.event.ActionEvent evt) {                                          
    	
     
        // if the user presses the save button show the save dialog
        String com = evt.getActionCommand();
        try {
            uploadFile(com,"Requests");
        } catch (IOException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InterruptedException ex) {
            Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }                                         

    private void injuredWorkerQueue(java.awt.event.ActionEvent evt) throws ClassNotFoundException, SQLException, IOException {                                          
    
    	QueueFiles df = new QueueFiles(host,user,pass,"Requests");
        df.setVisible(true);
        
    }                                         

    private void btnInjuredWorkerProcessing(java.awt.event.ActionEvent evt) throws ClassNotFoundException, SQLException { 
    	
    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("InjuredWorker");
    	processing_pop.setVisible(true);
        
    }                                         

                                          

    private void btnCandRUpload(java.awt.event.ActionEvent evt) {   
        	
        
			// if the user presses the save button show the save dialog
			String com = evt.getActionCommand();
			try {
			uploadFile(com,"C&R_EventsRequest");
			} catch (IOException ex) {
			Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
			} catch (InterruptedException ex) {
			Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
			}

        
    }                                         

    private void candrEventQueue(java.awt.event.ActionEvent evt) throws IOException { 
    	
    	QueueFiles df = new QueueFiles(host,user,pass,"C&R_EventsRequest");
        df.setVisible(true);
        
    }                                         

    private void candrProcessing(java.awt.event.ActionEvent evt) throws ClassNotFoundException, SQLException {                                          
        
    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("candrEvents");
    	processing_pop.setVisible(true);
    	
    }                                         

                                            

    private void btnConexemDataFetchAllUpload(java.awt.event.ActionEvent evt) {                                          
        
			// if the user presses the save button show the save dialog
			String com = evt.getActionCommand();
			try {
			uploadFile(com,"Conexem_DataFetch_Request");
			} catch (IOException ex) {
			Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
			} catch (InterruptedException ex) {
			Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
			}

    	        
    	    
    }                                         

    private void conexemAllQueue(java.awt.event.ActionEvent evt) throws IOException {                                          
        
    	QueueFiles df = new QueueFiles(host,user,pass,"Conexem_DataFetch_Request");
        df.setVisible(true);
        
    }                                         

    private void conexemAllProcessing(java.awt.event.ActionEvent evt) throws ClassNotFoundException, SQLException {       
    	
    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("ConexemDataFetchAll");
    	processing_pop.setVisible(true);
        
    }                                         

                                         

    private void conexemDataFetchRFAUpload(java.awt.event.ActionEvent evt) {    
    	
    	// if the user presses the save button show the save dialog
		String com = evt.getActionCommand();
		try {
		uploadFile(com,"Conexem_DataFetchRFA_Request");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
        
    }                                         

    private void conexemRFAQueue(java.awt.event.ActionEvent evt) throws IOException {                                          
        
    	QueueFiles df = new QueueFiles(host,user,pass,"Conexem_DataFetchRFA_Request");
        df.setVisible(true);
    }                                         

    private void conexemRFAProcessing(java.awt.event.ActionEvent evt) throws ClassNotFoundException, SQLException {                                          
        
    	ProcessingFilePopup processing_pop = new ProcessingFilePopup("ConexemDetailFetchRFA");
    	processing_pop.setVisible(true);
    	
    }                                         
                                     

    private void btnInjuredWorkerDownload(java.awt.event.ActionEvent evt) throws IOException {                                          
        
        
        DownloadFrame df = new DownloadFrame(host,user,pass,"Responses");
        df.setVisible(true);

    }                                         

    private void btnCandRDownload(java.awt.event.ActionEvent evt) throws IOException {                                          
        
    	 DownloadFrame df = new DownloadFrame(host,user,pass,"C&R_EventsResponse");
         df.setVisible(true);
         
    }                                         

    private void conexemDataFetchAllDownload(java.awt.event.ActionEvent evt) throws IOException {                                          
        
    	DownloadFrame df = new DownloadFrame(host,user,pass,"Conexem_DataFetch_Response");
        df.setVisible(true);

    }                                         

    private void conexemDataFetchRFADownload(java.awt.event.ActionEvent evt) throws IOException {                                          
    
    	DownloadFrame df = new DownloadFrame(host,user,pass,"Conexem_DataFetchRFA_Response");
        df.setVisible(true);
    }
    
    

    private void fetchHearing1Upload(java.awt.event.ActionEvent evt) {
    	
    	// if the user presses the save button show the save dialog
		String com = evt.getActionCommand();
		try {
		uploadFile(com,"FetchHearingRequest");
		} catch (IOException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException ex) {
		Logger.getLogger(MainUI.class.getName()).log(Level.SEVERE, null, ex);
		}
    }
   
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnInjuredWorkerUpload;
    private javax.swing.JButton btnInjuredWorkerQueue;
    private javax.swing.JButton btnInjuredWorkerProcessing;
    private javax.swing.JButton btnInjuredWorkerFileSample;
    private javax.swing.JButton btnCandRUpload;
    private javax.swing.JButton candrQueue;
    private javax.swing.JButton candrProcessing;
    private javax.swing.JButton btnCandRFileSample;
    private javax.swing.JButton btnConexemDataFetchAllUpload;
    private javax.swing.JButton btnConexemAllQueue;
    private javax.swing.JButton btnConexemProcessing;
    private javax.swing.JButton btnConexemFileSample;
    private javax.swing.JButton btnConexemDataFetchRFAUpload;
    private javax.swing.JButton btnConexemRFAQueue;
    private javax.swing.JButton btnConexemRFAProcessing;
    private javax.swing.JButton btnConexemRFAFileSample;
    private javax.swing.JButton btnInjuredWorkerDownload;
    private javax.swing.JButton btnCandRDownload;
    private javax.swing.JButton btnConexemDataFetchAllDownload;
    private javax.swing.JButton conexemDataFetchRFADownload;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabelDocMerging;
    private javax.swing.JScrollPane jScrollPane1;
    private JLabel lblDocumentmerging;
    private JButton btnDocMergingUpload;
    private JButton btnDocMergingDownload;
    private JButton btnDocMergingQueue;
    private JButton btnDocMergingProcessing;
    private JButton btnDocMergingFileSample;
    private JButton btnInjuredWorkerDesc;
    private JButton btnCandRDesc;
    private JLabel lblDocucentRequest;
    private JButton btnDocucentUpload;
    private JButton btnDocucentDownload;
    private JButton btnDocucentQueue;
    private JButton btnDocucentProcessing;
    private JButton btnDocucentFileSample;
    private JButton btnDocucentDesc;
    private JLabel lblDocucentGetpos;
    private JButton btnDocucentPOSUpload;
    private JButton btnDocucentPOSDownload;
    private JButton btnDocucentPOSQueue;
    private JButton btnDocucentPOSProcessing;
    private JButton btnDocucentPOSFileSample;
    private JButton btnConexemDataFetchAllDesc;
    private JButton btnConexemDataFetchRFADesc;
    private JButton btnDocMergingDesc;
    private JButton btnDocucentPOSDescription;
    private JLabel lblDocDownloadDdm;
    private JButton btnDocsDownDDMUpload;
    private JButton btnDocsDownDownload;
    private JButton btnDocsDownDDMQueue;
    private JButton btnDocsDownDDMProcessing;
    private JButton btnDocsDownDDMFileSample;
    private JButton btnDocsDownDDMDesc;
    private JLabel lblFetchHearing;
    private JButton btnFetchHearingReqUpload;
    private JButton btnFetchHearingReqDownload;
    private JButton btnFetchHearingReqQueue;
    private JButton btnFetchHearingReqProcessing;
    private JButton btnFetchHearingReqFileSample;
    private JButton btnFetchHearingReqDesc;
    private JLabel lblFetchhearingrequest;
    private JButton btnFetchHearingReq2Upload;
    private JButton btnFetchHearingReq2Download;
    private JButton btnFetchHearingReq2Queue;
    private JButton btnFetchHearingReq2Processing;
    private JButton btnFetchHearingReq2FileSample;
    private JButton btnFetchHearingReq2Desc;
    private JLabel lblHearingtestreq;
    private JButton btnHearingTestReqUpload;
    private JButton btnHearingTestReqDownload;
    private JButton btnHearingTestReqQueue;
    private JButton btnHearingTestReqProcessing;
    private JButton btnHearingTestReqFileSample;
    private JButton btnHearingTestReqDesc;
    private JLabel lblHearingtestreq_1;
    private JButton btnHearingTestReq2Upload;
    private JButton btnHearingTestReq2Download;
    private JButton btnHearingTestReq2Queue;
    private JButton btnHearingTestReq2Processing;
    private JButton btnHearingTestReq2FileSample;
    private JButton btnHearingTestReq2Desc;
    private JLabel lblGetpdfpagenorequest;
    private JButton btnGetPDFPageNoUpload;
    private JButton btnGetPDFPageNoDownload;
    private JButton btnGetPDFPageNoQueue;
    private JButton btnGetPDFPageNoProcessing;
    private JButton btnGetPDFPageNoFileSample;
    private JButton btnGetPDFPageNoDesc;
    private JLabel lblInterpretingbillcrml;
    private JButton btnInterpretingBillCRMLUpload;
    private JButton btnInterpretingBillCRMLDownload;
    private JButton btnInterpretingBillCRMLQueue;
    private JButton btnInterpretingBillCRMLProcessing;
    private JButton btnInterpretingBillCRMLFileSample;
    private JButton btnInterpretingBillCRMLDesc;
    private JLabel lblLienfiledstatus;
    private JButton btnLienFileStatusUpload;
    private JButton btnLienFileStatusDownload;
    private JButton btnLienFileStatusQueue;
    private JButton btnLienFileStatusProcessing;
    private JButton btnLienFileStatusFileSample;
    private JButton btnLienFileStatusDesc;
    private JLabel lblLienfiledstatusprovider;
    private JButton btnLienFileStatusProvUpload;
    private JButton btnLienFileStatusProvDownload;
    private JButton btnLienFileStatusProvQueue;
    private JButton btnLienFileStatusProvProcessing;
    private JButton btnLienFileStatusProvFileSample;
    private JButton btnLienFileStatusProvDesc;
    private JLabel lblMeddocsdownload;
    private JButton btnMedDocsDownUpload;
    private JButton btnMedDocsDownDownload;
    private JButton btnMedDocsDownQueue;
    private JButton btnMedDocsDownProcessing;
    private JButton btnMedDocsDownFileStatus;
    private JButton btnMedDocsDownDesc;
    private JLabel lblPdfvalidity;
    private JButton btnPDFValidityUpload;
    private JButton btnPDFValidityDownload;
    private JButton btnPDFValidityQueue;
    private JButton btnPDFValidityProcessing;
    private JButton btnPDFValidityFileSample;
    private JButton btnPDFValidityDesc;
    private JLabel lblResizepdf;
    private JButton btnResizePDFUpload;
    private JButton btnResizePDFDownload;
    private JButton btnResizePDFQueue;
    private JButton btnResizePDFProcessing;
    private JButton btnResizePDFFileSample;
    private JButton btnResizePDFDesc;
    private JLabel lblRuntimehcfa;
    private JButton btnRuntimeHCFAUpload;
    private JButton btnRuntimeHCFADownload;
    private JButton btnRuntimeHCFAQueue;
    private JButton btnRuntimeHCFAProcessing;
    private JButton btnRuntimeHCFAFileSample;
    private JButton btnRuntimeHCFADesc;
    private JLabel lblRuntimehcfaallstudy;
    private JButton btnHCFAAllStudyUpload;
    private JButton btnHCFAAllStudyDownload;
    private JButton btnHCFAAllStudyQueue;
    private JButton btnHCFAAllStudyProcessing;
    private JButton btnHCFAAllStudyFileSample;
    private JButton btnHCFAAllStudyDesc;
    private JLabel lblRuntimeinterpretingbill;
    private JButton btnRunInterpretingBillUpload;
    private JButton btnRunInterpretingBillDownload;
    private JButton btnRunInterpretingBillQueue;
    private JButton btnRunInterpretingBillProcessing;
    private JButton btnRunInterpretingBillFileSample;
    private JButton btnRuntimeInterpretingBillDesc;
    private JLabel lblRuntimeledger;
    private JButton btnRunLedgerUpload;
    private JButton btnRunLedgerDownload;
    private JButton btnRunLedgerQueue;
    private JButton btnRunLedgerProcessing;
    private JButton btnRunLedgerFileSample;
    private JButton btnRunLedgerDesc;
    private JLabel lblRuntimeledgerallstudy;
    private JButton btnRunLedgerAllStudyUpload;
    private JButton btnRunLedgerAllStudyDownload;
    private JButton btnRunLedgerAllStudyQueue;
    private JButton btnRunLedgerAllStudyProcessing;
    private JButton btnRunLedgerAllStudyFileSample;
    private JButton btnRunLedgerAllStudyDesc;
    private JLabel lblSbrdocrequest;
    private JButton btnSBRDocUpload;
    private JButton btnSBRDocDownload;
    private JButton btnSBRDocQueue;
    private JButton btnSBRDocProcessing;
    private JButton btnSBRDocFileSample;
    private JButton btnSBRDocDesc;
    private JLabel lblSupdecrequest;
    private JButton btnSupDecUpload;
    private JButton btnSupDecDownload;
    private JButton btnSupDecQueue;
    private JButton btnSupDecProcessing;
    private JButton btnSupDecFileSample;
    private JButton btnSupDecDesc;
    private JLabel lblSupdecallparty;
    private JButton btnSupDecAllPartyUpload;
    private JButton btnSupDecAllPartyDownload;
    private JButton btnSupDecAllPartyQueue;
    private JButton btnSupDecAllPartyProcessing;
    private JButton btnSupDecAllPartyFileSample;
    private JButton btnSupDecAllPartyDesc;
    private JLabel lblSupdecallpartyrequest;
    private JButton btnSupDecAllParty2Upload;
    private JButton btnSupDecAllParty2Download;
    private JButton btnSupDecAllParty2Queue;
    private JButton btnSupDecAllParty2Processing;
    private JButton btnSupDecAllParty2FileSample;
    private JButton btnSupDecAllParty2Desc;
    private JLabel label;
    private JLabel label_1;
    private JLabel label_2;
    private JLabel label_3;
    private JLabel label_4;
    private JLabel label_5;
    private JLabel label_6;
    private JButton btnDocNameDocucentUpload;
    private JButton btnDocNameDocucentDown;
    private JButton btnDocNameDocucentQueue;
    private JButton btnDocNameDocucentProcess;
    private JButton btnDocNameDocucentSample;
    private JButton btnDocNameDocucentDesc;
    private JLabel lblGetrequestdocdocucent;
    private JLabel lblBulkEmail;
    private JButton btnBulkEmailUpload;
    private JButton btnBulkEmailDownload;
    private JButton btnBulkEmailQueue;
    private JButton btnBulkEmailProcessing;
    private JButton btnBulkEmailFileSample;
    private JButton btnBulkEmailDesc;
    private JLabel lblConexemCRComPost;
    private JButton btnCCandRComP_Upload;
    private JButton btnCCandRComP_Down;
    private JButton btnCCandRComP_Que;
    private JButton btnCCandRComP_Proc;
    private JButton btnCCandRComP_Sample;
    private JButton btnCCandRComP_Desc;
}
