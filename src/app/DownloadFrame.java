/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;

import javax.swing.JFileChooser;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

import org.apache.commons.net.ftp.FTPFile;

import java.awt.Color;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

import javax.swing.JButton;
import javax.swing.GroupLayout.Alignment;
import javax.swing.GroupLayout;
import javax.swing.LayoutStyle.ComponentPlacement;
import javax.swing.RowFilter;

import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

import javax.swing.JTextField;

/**
 *
 * @author Rehan
 */
public class DownloadFrame extends javax.swing.JDialog {

	private static String host;
	private static String user;
	private static String pass;
	private static String service;
	
    /**
     * Creates new form DownloadFrame
     * @throws IOException 
     */
    public DownloadFrame(String host, String user, String pass, String service) throws IOException {
    
    			this.host = host;
    			this.user = user;
    			this.pass = pass;
    			this.service = service;
    			
    			
                initComponents();
                getAllFiles();
                
           
          
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

    	setCurrentModel(true);
    	jScrollPane1 = new javax.swing.JScrollPane();
        
        jDownloadList = new javax.swing.JTable();
        

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jDownloadList.setModel(new DefaultTableModel(
        	new Object[][] {
        	},
        	new String[] {
        		"Select", "Title 2"
        	}
        ) {
        	Class[] columnTypes = new Class[] {
        		Boolean.class, Object.class
        	};
        	public Class getColumnClass(int columnIndex) {
        		return columnTypes[columnIndex];
        	}
        });
//        jDownloadList.getColumnModel().getColumn(0).setPreferredWidth(20);
//        jDownloadList.getColumnModel().getColumn(0).setMaxWidth(20);
        jScrollPane1.setViewportView(jDownloadList);

        
        JButton btnDownloadSelected = new JButton("Download");
        btnDownloadSelected.addActionListener(new ActionListener() {
        	public void actionPerformed(ActionEvent e) {
        		
        		DefaultTableModel model = (DefaultTableModel)jDownloadList.getModel();
          	  	ArrayList<String> filename = new ArrayList<String>();
          	 
           	 	for(int i = 0; i < model.getRowCount() ; i++) {
           	 		System.out.println(model.getRowCount());
	           		 Object checkVal = model.getValueAt(i, 0);
	           		 boolean di = (Boolean) checkVal;
	           		 if(di == true) {
	           			 
	           			  filename.add(model.getValueAt(i, 1).toString());
	           		 }
           	 	}
           	 		if(filename.size() > 0) {
           	 			
           	 			setCurrentModel(false);
           	 			downloadSelectedRows(filename);

           	 		}
        	}
        });
        
        searchField = new JTextField();
        searchField.setColumns(10);
        searchField = new JTextField("Search");
        searchField.setForeground(Color.GRAY);
        searchField.addFocusListener(new FocusListener() {
            @Override
            public void focusGained(FocusEvent e) {
                if (searchField.getText().equals("Search")) {
                	searchField.setText("");
                	searchField.setForeground(Color.BLACK);
                }else
                	searchField.setForeground(Color.BLACK);
            }
            @Override
            public void focusLost(FocusEvent e) {
                if (searchField.getText().isEmpty()) {
                	searchField.setForeground(Color.GRAY);
                	//searchField.setText("Search");
                	searchField.setText("");

                }
            }
            });
        
        searchField.getDocument().addDocumentListener(new DocumentListener(){

            @Override
            public void insertUpdate(DocumentEvent e) {
                String text = searchField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                String text = searchField.getText();

                if (text.trim().length() == 0) {
                    rowSorter.setRowFilter(null);
                } else {
                    rowSorter.setRowFilter(RowFilter.regexFilter("(?i)" + text));
                }
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addComponent(jScrollPane1, GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
        		.addGroup(Alignment.TRAILING, layout.createSequentialGroup()
        			.addGap(47)
        			.addComponent(searchField, GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
        			.addGap(18)
        			.addComponent(btnDownloadSelected)
        			.addGap(31))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 271, GroupLayout.PREFERRED_SIZE)
        			.addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(btnDownloadSelected)
        				.addComponent(searchField, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
        );
        getContentPane().setLayout(layout);

        pack();
        setLocationRelativeTo(null);
        
//        jDownloadList.addMouseListener(new MouseAdapter() {
//        	@Override
//        	public void mouseClicked(MouseEvent e) {
//        		
//        		//if (e.getClickCount() == 2 && !e.isConsumed()) {
//        		System.out.println("Click count is "+e.getClickCount());
//            	if (e.getClickCount() > 1) {
//        		     //e.consume();
//        		     //handle double click event.
//		             System.out.println(jDownloadList.getValueAt(jDownloadList.getSelectedRow(), 0).toString());
//		             String filename = jDownloadList.getValueAt(jDownloadList.getSelectedRow(), 0).toString();
//		             
//		             JFileChooser f = new JFileChooser();
//		             f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
//		             int r = f.showSaveDialog(null);
//		             if (r == JFileChooser.APPROVE_OPTION) {
//		            	
//		             //System.out.println(f.getCurrentDirectory());
//		             System.out.println(f.getSelectedFile());
//		             File localDir = f.getSelectedFile();
//		             
//		             try {
//		            	 	DownloadPopup downloadp = new DownloadPopup();
//		            	 	downloadp.setVisible(true);
//		            	 	//DownloadWorker worker = new DownloadWorker(new URL("ftp://localhost"),new File(filename),service);
//		            	 	DownloadWorker worker = new DownloadWorker(host,user,pass,new File(filename),service,localDir);
//		            	    worker.addPropertyChangeListener(new PropertyChangeListener() {
//
//		            	        @Override
//		            	        public void propertyChange(PropertyChangeEvent evt) {
//		            	            if (evt.getPropertyName().equals("progress")) {
//		            	            	downloadp.jbutton1ChangeVisiblity(false);
//		            	                Integer progress = (Integer) evt.getNewValue();
//		            	                try {
//		            	                	downloadp.progressBarVal(progress);
//										} catch (MalformedURLException e) {
//											e.printStackTrace();
//										}
//		            	            }else 
//		            	            	downloadp.jbutton1ChangeVisiblity(true);
//
//		            	        }
//		            	    });
//		            	    worker.execute();
//		            	} catch (MalformedURLException ex) {
//		            	    ex.printStackTrace();
//		            	} catch (InterruptedException e1) {
//							e1.printStackTrace();
//						}
//		             
//		             
//		             }  		
//        		     
//        		}
//        		
//        	}
//        });
        
       
        
//        DefaultTableModel model = new DefaultTableModel() {
//
//            @Override
//            public boolean isCellEditable(int row, int column) {
//               //all cells false
//               return false;
//            }
//        };
//        jDownloadList.setModel(model);
        
    }// </editor-fold>                        

    private void setCurrentModel(boolean val) {

    	this.setModal(val);
	}

	public void downloadSelectedRows(ArrayList<String> filename) {


	     //e.consume();
	     //handle double click event.
//        System.out.println(jDownloadList.getValueAt(jDownloadList.getSelectedRow(), 0).toString());
    	  
        JFileChooser f = new JFileChooser();
        f.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY); 
        int r = f.showSaveDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
        	
        			  //System.out.println(f.getCurrentDirectory());
        		        System.out.println(f.getSelectedFile());
        		        File localDir = f.getSelectedFile();
        		        
        		        for(int i = 0; i < filename.size(); i++) {
        		        	int count  = i;
        		        	 try {
             		       	 	DownloadPopup downloadp = new DownloadPopup();
             		       	 	downloadp.setVisible(true);
             		       	 	//DownloadWorker worker = new DownloadWorker(new URL("ftp://localhost"),new File(filename),service);
             		       	 	DownloadWorker worker = new DownloadWorker(host,user,pass,new File(filename.get(i)),service,localDir);
             		       	    worker.addPropertyChangeListener(new PropertyChangeListener() {

             		       	        @Override
             		       	        public void propertyChange(PropertyChangeEvent evt) {
             		       	            if (evt.getPropertyName().equals("progress")) {
             		       	            	downloadp.jbutton1ChangeVisiblity(false);
             		       	            	downloadp.setDefaultCloseOperation(0);
             		       	                Integer progress = (Integer) evt.getNewValue();
             		       	                try {
             		       	                	downloadp.progressBarVal(progress);
             									} catch (MalformedURLException e) {
             										e.printStackTrace();
             									}
             		       	            }else {
             		       	            	
             		       	            	boolean checkBtnVisibile = downloadp.jbutton1CheckVisiblity();
             		       	            	if(checkBtnVisibile == false) {
	             		       	            	downloadp.jbutton1ChangeVisiblity(true);
	             		       	            	//if(count != filename.size() - 1)
	             		       	            		downloadp.dispose();
             		       	            	
             		       	            	}else
             		       	            		downloadp.jbutton1ChangeVisiblity(true);
             		       	            	
             		       	            }

             		       	        }
             		       	    });
             		       	    worker.execute();
             		       	} catch (MalformedURLException ex) {
             		       	    ex.printStackTrace();
             		       	} catch (InterruptedException e1) {
             						e1.printStackTrace();
             					}
        		        	
        		        }
        		        
        		       
        		 
        	 
        
        }  		
	     
	
	}

	/**
     * @param args the command line arguments
     * @throws IOException 
     */
    
    
    
   /* public void getAllFiles() throws IOException {
        
    	GetAllFiles getAll = new GetAllFiles();
    	FTPFile[] files = getAll.getAllFilesFromFolder("/"+service,host,user,pass);
        //File f1 = new File("C:\\FTPDownload\\");
        //File[] listFile = f1.listFiles();
        DefaultTableModel model = (DefaultTableModel)jDownloadList.getModel();
        model.setColumnIdentifiers(new String[] {"File Names"});
        Object[] row = new Object[1];
        
        for(FTPFile file : files) {
        	
        	row[0] = file.getName();
            model.addRow(row);
        }
        
        
    }*/
    
 public void getAllFiles() throws IOException {
        
    	GetAllFiles getAll = new GetAllFiles();
    	FTPFile[] files = getAll.getAllFilesFromFolder("/"+service,host,user,pass);
        //File f1 = new File("C:\\FTPDownload\\");
        //File[] listFile = f1.listFiles();
        DefaultTableModel model = (DefaultTableModel)jDownloadList.getModel();
        model.setColumnIdentifiers(new String[] {"Select","File Names"});
        
        jDownloadList.getColumnModel().getColumn(0).setPreferredWidth(20);
        jDownloadList.getColumnModel().getColumn(0).setMaxWidth(20);
        
       /* JTableHeader header = jDownloadList.getTableHeader();
        TableColumn lastColumn = header.getColumnModel().getColumn(0);
        header.setResizingColumn(lastColumn);
        */

        Object[] row = new Object[2];
        
        int rowcount = 0;
        for(FTPFile file : files) {

            model.addRow(new Object[0]);
            model.setValueAt(false, rowcount, 0);
            model.setValueAt(file.getName(), rowcount, 1);
            rowcount++;
            
        }
        
        rowSorter = new TableRowSorter<>(jDownloadList.getModel());
        jDownloadList.setRowSorter(rowSorter);
        

    }
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DownloadFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
					new DownloadFrame(host, user, pass, service).setVisible(true);
				} catch (IOException e) {
					e.printStackTrace();
				}
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JTable jDownloadList;
    private javax.swing.JScrollPane jScrollPane1;
    private JTextField searchField;
    private TableRowSorter<TableModel> rowSorter;
}
